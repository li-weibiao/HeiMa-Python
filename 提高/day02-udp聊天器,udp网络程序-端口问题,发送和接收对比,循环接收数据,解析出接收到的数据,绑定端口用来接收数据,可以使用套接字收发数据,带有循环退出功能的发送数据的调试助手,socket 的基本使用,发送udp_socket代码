发送udp_socket代码如下:
#coding=utf-8

from socket import *

#1.创建udp套接字
udp_socket = socket(AF_INET, SOCK_DGRAM)

#2.准备接收方的地址
#192.168.1.103表示目的ip地址
#8080表示目的端口
dest_addr = ('192.168.1.103', 8080)  #注意是元组, ip是字符串, 端口是数字

#3.从键盘获取数据
send_data = input("请输入要发送的数据:")

#4.发送数据到指定的电脑上的指定程序中
udp_ socket. sendto(send_data. encode('utf-8'), dest _addr)

#5.关闭套接字
udp_socket. close()


(如果用虚拟机来发送信息到另外一个虚拟机，网络要是不通的话，就可以改为桥接)

(ubantu上如果没有ip，可以用命令 sudo dhclient 来分配一个IP地址)

eg: socket 的基本使用

import socket

def main():
	# 创建一个udp套接字
	udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

	# 可以使用套接字收发数据
	# udp_socket.sendto("hahaha", 对方的ip以及port)      
	udp_socket.sendto(b"hahaha", ("169.254.252.193", 8080))    #加b是为了发送字节类型，就不会报错

	# 关闭套接字
	udp_socket.close()


if __name__ == "__main__":
	main()



eg:  发送任意数据给windows中调试助手

import socket

def main():
	# 创建一个udp套接字
	udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

	# 从键盘获取数据
	send_data = input("请输入要发送的数据：")

	# 可以使用套接字收发数据
	# udp_socket.sendto("hahaha", 对方的ip以及port)
	# udp_socket.sendto(b"hahaha", ("169.254.252.193", 8080))   #加b是为了发送字节类型，就不会报错
	udp_socket.sendto(send_data.encode("utf-8"), ("169.254.252.193", 8080))

	# 关闭套接字
	udp_socket.close()


if __name__ == "__main__":
	main()


eg: 带有循环退出功能的发送数据的调试助手

#coding=utf-8
import socket

def main():
	# 创建一个udp套接字
	udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

	while True:
		# 从键盘获取数据
		send_data = input("请输入要发送的数据：")

		# 如果输入的数据是exit，那么就退出程序
		if send_data == "exit":
			break

		# 可以使用套接字收发数据
		# udp_socket.sendto("hahaha", 对方的ip以及port)
		# udp_socket.sendto(b"hahaha", ("169.254.252.193", 8080))   #加b是为了发送字节类型，就不会报错
		udp_socket.sendto(send_data.encode("utf-8"), ("169.254.252.193", 8080))    #  encode 是编码, 另外如果utf-8不行在windows显示乱码的话，就改为gbk

	# 关闭套接字
	udp_socket.close()


if __name__ == "__main__":
	main()




2. 接收数据绑定示例
#coding=utf-8

from socket import *

#1. 创建套接字
udp_socket = socket(AF_INET, SOCK_DGRAM)

#2.绑定本地的相关信息,如果一个网络程序不绑定则系统会随机分配
local_addr = ('', 7788)  #ip地址和端口号, ip一般不用写, 表示本机的任何一个ip
udp_ socket.bind( local_addr)

#3.等待接收对方发送的数据
recv_data = udp_socket.recvfrom(1024)       #1024表示本次接收的最大字节数

#4.显示接收到的数据
print(recv_data[0].decode('gbk'))

#5.关闭套接字
udp_socket.close()


eg: 绑定端口用来接收数据

import socket

def main():
	# 1. 创建套接字
	udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	# 2. 绑定一个本地信息
	localaddr = ('', 7788)
	udp_socket.bind(localaddr)
	# 3. 接收数据
	recv_data = udp_socket.recvfrom(1024)     # 1024表示接收的字节
	# 4. 打印接收到的数据
	print(recv_data)
	# 5. 关闭套接字
	udp_socket.close()


if __name__ == "__main__":
	main()


eg: 解析出接收到的数据

import socket

def main():
	# 1. 创建套接字
	udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	# 2. 绑定一个本地信息
	localaddr = ('', 7788)
	udp_socket.bind(localaddr)  # 必须绑定自己电脑的ip以及port, 其他的不行
	# 3. 接收数据
	recv_data = udp_socket.recvfrom(1024)     # 1024表示接收的字节
	# recv_data这个变量中存储的是一个元组(接收到的数据，(发送方的ip, port))
	recv_msg = recv_data[0]  # 存储接收的数据
	send_addr = recv_data[1]  # 存储发送方的地址信息
	# 4. 打印接收到的数据
	# print(recv_data)
	# print("%s:%s" % (str(send_addr), recv_msg.decode("utf-8")))  # decode 是解码
	print("%s:%s" % (str(send_addr), recv_msg.decode("gbk")))
	# 5. 关闭套接字
	udp_socket.close()


if __name__ == "__main__":
	main()




eg: 循环接收数据

import socket

def main():
	# 1. 创建套接字
	udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	# 2. 绑定一个本地信息
	localaddr = ('', 7788)
	udp_socket.bind(localaddr)  # 必须绑定自己电脑的ip以及port, 其他的不行
	
	while True:
		# 3. 接收数据
		recv_data = udp_socket.recvfrom(1024)     # 1024表示接收的字节
		# recv_data这个变量中存储的是一个元组(接收到的数据，(发送方的ip, port))
		recv_msg = recv_data[0]  # 存储接收的数据
		send_addr = recv_data[1]  # 存储发送方的地址信息
		# 4. 打印接收到的数据
		# print(recv_data)
		# print("%s:%s" % (str(send_addr), recv_msg.decode("utf-8")))  # decode 是解码
		print("%s:%s" % (str(send_addr), recv_msg.decode("gbk")))
	
	# 5. 关闭套接字
	udp_socket.close()


if __name__ == "__main__":
	main()



发送和接收对比：

发送数据的流程                                       接收数据的流程
1.创建套接字                                         1.创建套接字
2.发送数据                                           2.绑定本地自己的信息(ip和port)
3.关闭                                               3.接收数据
                                                     4.关闭



3. udp网络程序-端口问题

eg: 先绑定端口，然后再循环发送

#coding=utf-8
import socket

def main():
	# 创建一个udp套接字
	udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

	# 绑定本地信息
	udp_socket.bind(('', 7890))

	while True:
		# 从键盘获取数据
		send_data = input("请输入要发送的数据：")

		# 如果输入的数据是exit，那么就退出程序
		if send_data == "exit":
			break

		# 可以使用套接字收发数据
		# udp_socket.sendto("hahaha", 对方的ip以及port)
		# udp_socket.sendto(b"hahaha", ("169.254.252.193", 8080))   #加b是为了发送字节类型，就不会报错
		udp_socket.sendto(send_data.encode("gbk"), ("169.254.252.193", 8080))

	# 关闭套接字
	udp_socket.close()


if __name__ == "__main__":
	main()


注意：端口号不能被同时使用



4. 应用:udp聊天器
说明
·在一个电脑中编写1个程序,有2个功能
1.获取键盘数据并将其发送给对方
2接收数据并显示
并且功能数据进行选择以上的2个功能调用
要求
1.实现上述程序

参考代码：
import socket

def send_msg(udp_socket):
'''获取键盘数据,并将其发送给对方'''

#1.从键盘输入数据
msg = input("\n请输入要发送的数据:")
#2.输入对方的ip地址
dest_ip = input("\n请输入对方的ip地址:)
#3.输入对方的port
dest_port = int(input("\n请输入对方的port:"))
#4.发送数据
udp_socket.sendto(msg.encode("utf-8"), (dest_ip, dest_port))

（udp聊天器下面有eg实例）


socket套接字是全双工（互相通信，可以同时进行）



eg: 使用同一个套接字收发数据

#coding=utf-8
import socket

def main():
	# 创建一个udp套接字
	udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

	# 获取对方的ip/port
	dest_ip = input("请输入对方的ip:")
	dest_port = int(input("请输入对方的port:"))

	# 绑定本地信息
	udp_socket.bind(('', 7890))

	# 从键盘获取数据
	send_data = input("请输入要发送的数据：")

	# 可以使用套接字收发数据
	# udp_socket.sendto("hahaha", 对方的ip以及port)
	# udp_socket.sendto(b"hahaha", ("169.254.252.193", 8080))   #加b是为了发送字节类型，就不会报错
	# udp_socket.sendto(send_data.encode("gbk"), ("169.254.252.193", 8080))
	udp_socket.sendto(send_data.encode("gbk"), (dest_ip, dest_port))

	# 接收回送过来的数据
	recv_data = udp_socket.recvfrom(1024)
	# 套接字可以同时收发数据
	print(recv_data)

	# 关闭套接字
	udp_socket.close()


if __name__ == "__main__":
	main()



eg: udp聊天器

import socket


def send_msg(udp_socket):
	"""发送消息"""
	# 获取要发送的内容
	dest_ip = input("请输入对方的ip:")
	dest_port = int(input("请输入对方的port:"))
	send_data = input("请输入要发送的内容:")
	udp_socket.sendto(send_data.encode("utf-8"), (dest_ip, dest_port))


def recv_msg(udp_socket):
	"""接收数据"""
	recv_data = udp_socket.recvfrom(1024)
	print("%s:%s" % (str(recv_data[1]), recv_data[0].decode("utf-8")))


def main():
	# 创建套接字
	udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

	# 绑定信息
	udp_socket.bind(('', 7788))

	# 循环来处理事情
	while True:
		print("-------xxx聊天器--------")
		print("1. 发送消息")
		print("2. 接收消息")
		print("0. 退出系统")
		op = input("请输入功能:")
		
		if op == "1":
			# 发送
			send_msg(udp_socket)
		elif op == "2":
			# 接收并显示
			recv_msg(udp_socket)
		elif op == "0":
			break
		else:
			print("输入有误，请重新输入...")


if __name__ == "__main__":
	main()
