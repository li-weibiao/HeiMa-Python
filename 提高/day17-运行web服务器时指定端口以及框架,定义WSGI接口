eg:面向对象-web服务器

import socket
import re
import multiprocessing


class WSGIServer(object):  # 类名要符合大驼峰命名法
	def __init__(self):
		# 1. 创建套接字
		self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # tcp三次握手，四次挥手,客户端先释放资源，服务器可以等一段时间，可以避免服务器先释放资源后，引起端口被占用的情况

		# 2. 绑定
		self.tcp_server_socket.bind(("", 7890))

		# 3. 变为监听套接字
		self.tcp_server_socket.listen(128)

	def service_client(self, new_socket):
		"""为这个客户端返回数据"""

		# 1. 接收浏览器发送过来的请求，即http请求
		# GET / HTTP/1.1
		# ....
		request = new_socket.recv(1024).decode("utf-8")
		# print(">>>" * 50)
		# print(request)

		request_lines = request.splitlines()   # 将接收到的请求拆分成多行
		print("")
		# print(">"*20)
		print(request_lines)    # 返回的是列表的值

		# GET /index.html HTTP/1.1
		# 以后可能还会出现 get post put del
		# 用户请求的东西通过正则得知
		file_name = ""
		ret = re.match(r"[^/]+(/[^ ]*)", request_lines[0])  # +表示前一个字符至少有一次，*表示前一个字符出现0次或者无限次
		if ret:
			file_name = ret.group(1)
			# print(file_name)
			if file_name == "/":
				file_name = "/index.html"
		# 2. 返回http格式的数据，给浏览器
		try:
			f = open("./html" + file_name, "rb")
		except:
			response = "HTTP/1.1 404 NOT FOUND\r\n"
			response += "\r\n"
			response += "-----file not found-----"
			new_socket.send(response.encode("utf-8"))
		else:
			html_content = f.read()
			f.close()
			# 2.1 准备发送给浏览器的数据---header
			response = "HTTP/1.1 200 ok\r\n"    # \r\n表示换行
			response += "\r\n"         # 空了一行才表示http头部结束
			# 2.2 准备发送给浏览器的数据---body
			# response += "<h1>hahaha</h1>"
			# 将response header发送给浏览器
			new_socket.send(response.encode("utf-8"))
			# 将response body发送给浏览器
			new_socket.send(html_content)
		
		# 关闭套接字
		new_socket.close()


	def run_forever(self):
		"""用来完成整体的控制"""

		while True:
			# 4. 等待新客户端的链接
			new_socket, client_addr = self.tcp_server_socket.accept()

			# 5. 为这个客户端服务
			p = multiprocessing.Process(target=self.service_client, args=(new_socket,))
			p.start()
			
			new_socket.close()  # 主进程调用close，简而言之和子线程共享一份资源，子线程会copy一份资源，但是子线程关闭后，主线程不关闭则会一直占据资源，所以浏览器会一直转圈
			

		# 关闭监听套接字
		self.tcp_server_socket.close()


def main():
	"""控制整体，创建一个web 服务器对象， 然后调用这个对象的run_forever方法运行"""
	wsgi_server = WSGIServer()
	wsgi_server.run_forever()


if __name__ == "__main__":
	main()



eg:02-web服务器里集成了解析动态请求的功能

import socket
import re
import multiprocessing
import time


class WSGIServer(object):  # 类名要符合大驼峰命名法
	def __init__(self):
		# 1. 创建套接字
		self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # tcp三次握手，四次挥手,客户端先释放资源，服务器可以等一段时间，可以避免服务器先释放资源后，引起端口被占用的情况

		# 2. 绑定
		self.tcp_server_socket.bind(("", 7890))

		# 3. 变为监听套接字
		self.tcp_server_socket.listen(128)

	def service_client(self, new_socket):
		"""为这个客户端返回数据"""

		# 1. 接收浏览器发送过来的请求，即http请求
		# GET / HTTP/1.1
		# ....
		request = new_socket.recv(1024).decode("utf-8")
		# print(">>>" * 50)
		# print(request)

		request_lines = request.splitlines()   # 将接收到的请求拆分成多行
		print("")
		# print(">"*20)
		print(request_lines)    # 返回的是列表的值

		# GET /index.html HTTP/1.1
		# 以后可能还会出现 get post put del
		# 用户请求的东西通过正则得知
		file_name = ""
		ret = re.match(r"[^/]+(/[^ ]*)", request_lines[0])  # +表示前一个字符至少有一次，*表示前一个字符出现0次或者无限次
		if ret:
			file_name = ret.group(1)
			# print(file_name)
			if file_name == "/":
				file_name = "/index.html"
		# 2. 返回http格式的数据，给浏览器
		# 2.1 如果请求的资源不是以.py结尾，那么就认为是静态资源，如html/css/js/png,jpg等
		if not file_name.endswith(".py"):  # 判断以什么什么结尾
			try:
				f = open("./html" + file_name, "rb")
			except:
				response = "HTTP/1.1 404 NOT FOUND\r\n"
				response += "\r\n"
				response += "-----file not found-----"
				new_socket.send(response.encode("utf-8"))
			else:
				html_content = f.read()
				f.close()
				# 2.1 准备发送给浏览器的数据---header
				response = "HTTP/1.1 200 ok\r\n"    # \r\n表示换行
				response += "\r\n"         # 空了一行才表示http头部结束
				# 2.2 准备发送给浏览器的数据---body
				# response += "<h1>hahaha</h1>"
				# 将response header发送给浏览器
				new_socket.send(response.encode("utf-8"))
				# 将response body发送给浏览器
				new_socket.send(html_content)
		else:
			# 2.2 如果是以.py结尾，那么就认为是动态资源的请求
			header = "HTTP/1.1 200 OK\r\n"
			header += "\r\n"

			body = "hahaha %s" % time.ctime()

			response = header + body 
			# 发送response给浏览器
			new_socket.send(response.encode("utf-8"))

		
		# 关闭套接字
		new_socket.close()


	def run_forever(self):
		"""用来完成整体的控制"""

		while True:
			# 4. 等待新客户端的链接
			new_socket, client_addr = self.tcp_server_socket.accept()

			# 5. 为这个客户端服务
			p = multiprocessing.Process(target=self.service_client, args=(new_socket,))
			p.start()
			
			new_socket.close()  # 主进程调用close，简而言之和子线程共享一份资源，子线程会copy一份资源，但是子线程关闭后，主线程不关闭则会一直占据资源，所以浏览器会一直转圈
			

		# 关闭监听套接字
		self.tcp_server_socket.close()


def main():
	"""控制整体，创建一个web 服务器对象， 然后调用这个对象的run_forever方法运行"""
	wsgi_server = WSGIServer()
	wsgi_server.run_forever()


if __name__ == "__main__":
	main()





eg:04-将web服务器和逻辑处理的代码分开-升级版
1.web_server.py：

import socket
import re
import multiprocessing
import time
import mini_frame


class WSGIServer(object):  # 类名要符合大驼峰命名法
	def __init__(self):
		# 1. 创建套接字
		self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # tcp三次握手，四次挥手,客户端先释放资源，服务器可以等一段时间，可以避免服务器先释放资源后，引起端口被占用的情况

		# 2. 绑定
		self.tcp_server_socket.bind(("", 7890))

		# 3. 变为监听套接字
		self.tcp_server_socket.listen(128)

	def service_client(self, new_socket):
		"""为这个客户端返回数据"""

		# 1. 接收浏览器发送过来的请求，即http请求
		# GET / HTTP/1.1
		# ....
		request = new_socket.recv(1024).decode("utf-8")
		# print(">>>" * 50)
		# print(request)

		request_lines = request.splitlines()   # 将接收到的请求拆分成多行
		print("")
		# print(">"*20)
		print(request_lines)    # 返回的是列表的值

		# GET /index.html HTTP/1.1
		# 以后可能还会出现 get post put del
		# 用户请求的东西通过正则得知
		file_name = ""
		ret = re.match(r"[^/]+(/[^ ]*)", request_lines[0])  # +表示前一个字符至少有一次，*表示前一个字符出现0次或者无限次
		if ret:
			file_name = ret.group(1)
			# print(file_name)
			if file_name == "/":
				file_name = "/index.html"
		# 2. 返回http格式的数据，给浏览器
		# 2.1 如果请求的资源不是以.py结尾，那么就认为是静态资源，如html/css/js/png,jpg等
		if not file_name.endswith(".py"):  # 判断以什么什么结尾
			try:
				f = open("./html" + file_name, "rb")
			except:
				response = "HTTP/1.1 404 NOT FOUND\r\n"
				response += "\r\n"
				response += "-----file not found-----"
				new_socket.send(response.encode("utf-8"))
			else:
				html_content = f.read()
				f.close()
				# 2.1 准备发送给浏览器的数据---header
				response = "HTTP/1.1 200 ok\r\n"    # \r\n表示换行
				response += "\r\n"         # 空了一行才表示http头部结束
				# 2.2 准备发送给浏览器的数据---body
				# response += "<h1>hahaha</h1>"
				# 将response header发送给浏览器
				new_socket.send(response.encode("utf-8"))
				# 将response body发送给浏览器
				new_socket.send(html_content)
		else:
			# 2.2 如果是以.py结尾，那么就认为是动态资源的请求
			header = "HTTP/1.1 200 OK\r\n"
			header += "\r\n"

			# body = "hahaha %s" % time.ctime()
			# if file_name == "/login.py":
			# 	body = mini_frame.login()
			# elif file_name == "/register.py":
			# 	body = mini_frame.register()
			body = mini_frame.application(file_name)

			response = header + body 
			# 发送response给浏览器
			new_socket.send(response.encode("utf-8"))

		
		# 关闭套接字
		new_socket.close()


	def run_forever(self):
		"""用来完成整体的控制"""

		while True:
			# 4. 等待新客户端的链接
			new_socket, client_addr = self.tcp_server_socket.accept()

			# 5. 为这个客户端服务
			p = multiprocessing.Process(target=self.service_client, args=(new_socket,))
			p.start()
			
			new_socket.close()  # 主进程调用close，简而言之和子线程共享一份资源，子线程会copy一份资源，但是子线程关闭后，主线程不关闭则会一直占据资源，所以浏览器会一直转圈
			

		# 关闭监听套接字
		self.tcp_server_socket.close()


def main():
	"""控制整体，创建一个web 服务器对象， 然后调用这个对象的run_forever方法运行"""
	wsgi_server = WSGIServer()
	wsgi_server.run_forever()


if __name__ == "__main__":
	main()


2. mini_frame.py：

import time

def login():
	return "----login----welcome to our website......time:%s" % time.ctime()

def register():
	return "----register---welcome to our website......time:%s" % time.ctime()

def profile():
	return "---profile---welcome to our website......time:%s" % time.ctime()

def application(file_name):
	if file_name == "/login.py":
		return login()
	elif file_name == "/register.py":
		return register()
	else:
		return "not found you page..."





2. WSGI允许开发者将选择web框架和web服务器分开·可以混合匹配web服务器和web框架选择一个适合
的配对比如,可以在 Gunicorn或者Ngnx/uWSGI或者 Waitress上运行 Django, Flask,或 Pyramid·真正
的混合匹配,得益于WSG同时支持服务器和架构


web服务器必须具备WSGI接口,所有的现代Python Web框架都已具备WSGI接口它让你不对代码作修改
就能使服务器和特点的web框架协同工作
WSGI由web服务器支持,而web框架允许你选择适合自己的配对,但它同样对于服务器和框架开发者提供
便利使他们可以专注于自己爱的领域和专长而不至于相互牵制·其他语言也有类似接口:java有 Servlet
API, Ruby 有 Rack。



3. 定义WSGI接口
WSGI接口定义非常简单它只要求Web开发者实现一个函数,就可以响应HTTP请求，我们来看一个最简
单的Web版本的Hello World!
def application(environ, start_response):
 	start_response('200 OK',  [('Content-Type', 'text/html')])
 	return 'Hello World!'
上面的 application()函数就是符合WSGI标准的一个HTTP处理函数,它接收两个参数:
 environ:一个包含所有HTTP请求信息的dict对象
 start_response:一个发送HTTP响应的函数
整个 application( HTTPweb数本身没有涉及到任何解析HTTP的部分,也就是说,把底层web服务器解析部分
和应用程序逻辑部分进行了分离·这样开发者就可以专心做一个领域了
不过,等等·这个 application()函数怎么调用?如果我们自己调用,两个参数 environ和
 start_response我们没法提供,返回的str也没法发给浏览器
所以 application函数必须由WSGI服务器来调用·有很多符合WSGI规范的服务器而我们此时的
web服务器项目的目的就是做一个既能解析静态网页还可以解析动态网页的服务器




eg:05-让web服务器支持WSGI协议
1. web_server.py：

import socket
import re
import multiprocessing
import time
import mini_frame


class WSGIServer(object):  # 类名要符合大驼峰命名法
	def __init__(self):
		# 1. 创建套接字
		self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # tcp三次握手，四次挥手,客户端先释放资源，服务器可以等一段时间，可以避免服务器先释放资源后，引起端口被占用的情况

		# 2. 绑定
		self.tcp_server_socket.bind(("", 7890))

		# 3. 变为监听套接字
		self.tcp_server_socket.listen(128)

	def service_client(self, new_socket):
		"""为这个客户端返回数据"""

		# 1. 接收浏览器发送过来的请求，即http请求
		# GET / HTTP/1.1
		# ....
		request = new_socket.recv(1024).decode("utf-8")
		# print(">>>" * 50)
		# print(request)

		request_lines = request.splitlines()   # 将接收到的请求拆分成多行
		print("")
		# print(">"*20)
		print(request_lines)    # 返回的是列表的值

		# GET /index.html HTTP/1.1
		# 以后可能还会出现 get post put del
		# 用户请求的东西通过正则得知
		file_name = ""
		ret = re.match(r"[^/]+(/[^ ]*)", request_lines[0])  # +表示前一个字符至少有一次，*表示前一个字符出现0次或者无限次
		if ret:
			file_name = ret.group(1)
			# print(file_name)
			if file_name == "/":
				file_name = "/index.html"
		# 2. 返回http格式的数据，给浏览器
		# 2.1 如果请求的资源不是以.py结尾，那么就认为是静态资源，如html/css/js/png,jpg等
		if not file_name.endswith(".py"):  # 判断以什么什么结尾
			try:
				f = open("./html" + file_name, "rb")
			except:
				response = "HTTP/1.1 404 NOT FOUND\r\n"
				response += "\r\n"
				response += "-----file not found-----"
				new_socket.send(response.encode("utf-8"))
			else:
				html_content = f.read()
				f.close()
				# 2.1 准备发送给浏览器的数据---header
				response = "HTTP/1.1 200 ok\r\n"    # \r\n表示换行
				response += "\r\n"         # 空了一行才表示http头部结束
				# 2.2 准备发送给浏览器的数据---body
				# response += "<h1>hahaha</h1>"
				# 将response header发送给浏览器
				new_socket.send(response.encode("utf-8"))
				# 将response body发送给浏览器
				new_socket.send(html_content)
		else:
			# 2.2 如果是以.py结尾，那么就认为是动态资源的请求

			# body = "hahaha %s" % time.ctime()
			# if file_name == "/login.py":
			# 	body = mini_frame.login()
			# elif file_name == "/register.py":
			# 	body = mini_frame.register()
			env = dict()
			body = mini_frame.application(env, self.set_response_header)

			header = "HTTP/1.1 %s\r\n" % self.status

			for temp in self.headers:
				header += "%s:%s\r\n" % (temp[0], temp[1])

			header += "\r\n"

			response = header + body 
			# 发送response给浏览器
			new_socket.send(response.encode("utf-8"))

		
		# 关闭套接字
		new_socket.close()

	def set_response_header(self, status, headers):
		self.status = status
		self.headers = [("server", "mini_web v8.8")]
		self.headers += headers


	def run_forever(self):
		"""用来完成整体的控制"""

		while True:
			# 4. 等待新客户端的链接
			new_socket, client_addr = self.tcp_server_socket.accept()

			# 5. 为这个客户端服务
			p = multiprocessing.Process(target=self.service_client, args=(new_socket,))
			p.start()
			
			new_socket.close()  # 主进程调用close，简而言之和子线程共享一份资源，子线程会copy一份资源，但是子线程关闭后，主线程不关闭则会一直占据资源，所以浏览器会一直转圈
			

		# 关闭监听套接字
		self.tcp_server_socket.close()


def main():
	"""控制整体，创建一个web 服务器对象， 然后调用这个对象的run_forever方法运行"""
	wsgi_server = WSGIServer()
	wsgi_server.run_forever()


if __name__ == "__main__":
	main()




2. mini_frame.py：

def application(environ, start_response):
	start_response('200 OK',  [('Content-Type', 'text/html;charset=utf-8')])  # 让框架来进行解码，服务器只负责运行
	return 'Hello World! 我爱你中国....'





eg: 06-通过传递字典实现浏览器请求不一样的资源（不一样的后缀名，如xxxx.py）
1. web_server.py：

import socket
import re
import multiprocessing
import time
import mini_frame


class WSGIServer(object):  # 类名要符合大驼峰命名法
	def __init__(self):
		# 1. 创建套接字
		self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # tcp三次握手，四次挥手,客户端先释放资源，服务器可以等一段时间，可以避免服务器先释放资源后，引起端口被占用的情况

		# 2. 绑定
		self.tcp_server_socket.bind(("", 7890))

		# 3. 变为监听套接字
		self.tcp_server_socket.listen(128)

	def service_client(self, new_socket):
		"""为这个客户端返回数据"""

		# 1. 接收浏览器发送过来的请求，即http请求
		# GET / HTTP/1.1
		# ....
		request = new_socket.recv(1024).decode("utf-8")
		# print(">>>" * 50)
		# print(request)

		request_lines = request.splitlines()   # 将接收到的请求拆分成多行
		print("")
		# print(">"*20)
		print(request_lines)    # 返回的是列表的值

		# GET /index.html HTTP/1.1
		# 以后可能还会出现 get post put del
		# 用户请求的东西通过正则得知
		file_name = ""
		ret = re.match(r"[^/]+(/[^ ]*)", request_lines[0])  # +表示前一个字符至少有一次，*表示前一个字符出现0次或者无限次
		if ret:
			file_name = ret.group(1)
			# print(file_name)
			if file_name == "/":
				file_name = "/index.html"
		# 2. 返回http格式的数据，给浏览器
		# 2.1 如果请求的资源不是以.py结尾，那么就认为是静态资源，如html/css/js/png,jpg等
		if not file_name.endswith(".py"):  # 判断以什么什么结尾
			try:
				f = open("./html" + file_name, "rb")
			except:
				response = "HTTP/1.1 404 NOT FOUND\r\n"
				response += "\r\n"
				response += "-----file not found-----"
				new_socket.send(response.encode("utf-8"))
			else:
				html_content = f.read()
				f.close()
				# 2.1 准备发送给浏览器的数据---header
				response = "HTTP/1.1 200 ok\r\n"    # \r\n表示换行
				response += "\r\n"         # 空了一行才表示http头部结束
				# 2.2 准备发送给浏览器的数据---body
				# response += "<h1>hahaha</h1>"
				# 将response header发送给浏览器
				new_socket.send(response.encode("utf-8"))
				# 将response body发送给浏览器
				new_socket.send(html_content)
		else:
			# 2.2 如果是以.py结尾，那么就认为是动态资源的请求

			# body = "hahaha %s" % time.ctime()
			# if file_name == "/login.py":
			# 	body = mini_frame.login()
			# elif file_name == "/register.py":
			# 	body = mini_frame.register()
			env = dict()
			env['PATH_INFO'] = file_name
			# {'PATH_INFO': "/index.py"}
			body = mini_frame.application(env, self.set_response_header)

			header = "HTTP/1.1 %s\r\n" % self.status

			for temp in self.headers:
				header += "%s:%s\r\n" % (temp[0], temp[1])

			header += "\r\n"

			response = header + body 
			# 发送response给浏览器
			new_socket.send(response.encode("utf-8"))

		
		# 关闭套接字
		new_socket.close()

	def set_response_header(self, status, headers):
		self.status = status
		self.headers = [("server", "mini_web v8.8")]
		self.headers += headers


	def run_forever(self):
		"""用来完成整体的控制"""

		while True:
			# 4. 等待新客户端的链接
			new_socket, client_addr = self.tcp_server_socket.accept()

			# 5. 为这个客户端服务
			p = multiprocessing.Process(target=self.service_client, args=(new_socket,))
			p.start()
			
			new_socket.close()  # 主进程调用close，简而言之和子线程共享一份资源，子线程会copy一份资源，但是子线程关闭后，主线程不关闭则会一直占据资源，所以浏览器会一直转圈
			

		# 关闭监听套接字
		self.tcp_server_socket.close()


def main():
	"""控制整体，创建一个web 服务器对象， 然后调用这个对象的run_forever方法运行"""
	wsgi_server = WSGIServer()
	wsgi_server.run_forever()


if __name__ == "__main__":
	main()



2. mini_frame.py：

def index():
	return "这是主页"

def login():
	return "这是登陆页面"

def application(env, start_response):
	start_response('200 OK',  [('Content-Type', 'text/html;charset=utf-8')])
	
	file_name = env['PATH_INFO']
	# file_name = "/index.py"
	if file_name == "/index.py":
		return index()
	elif file_name == "/login.py":
		return login()
	else: 
		return 'Hello World! 我爱你中国....'






eg: 07-实现模版文件（有templates【里面有index.html等模版】,static【里面有css,js等文件】,dynamic三个目录，其中将mini_frame.py文件放在了dynamic【框架】里面）
1.  web_server.py：

import socket
import re
import multiprocessing
import time
import dynamic.mini_frame  # 导入dynamic(框架)目录里的mini_frame文件


class WSGIServer(object):  # 类名要符合大驼峰命名法
	def __init__(self):
		# 1. 创建套接字
		self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # tcp三次握手，四次挥手,客户端先释放资源，服务器可以等一段时间，可以避免服务器先释放资源后，引起端口被占用的情况

		# 2. 绑定
		self.tcp_server_socket.bind(("", 7890))

		# 3. 变为监听套接字
		self.tcp_server_socket.listen(128)

	def service_client(self, new_socket):
		"""为这个客户端返回数据"""

		# 1. 接收浏览器发送过来的请求，即http请求
		# GET / HTTP/1.1
		# ....
		request = new_socket.recv(1024).decode("utf-8")
		# print(">>>" * 50)
		# print(request)

		request_lines = request.splitlines()   # 将接收到的请求拆分成多行
		print("")
		# print(">"*20)
		print(request_lines)    # 返回的是列表的值

		# GET /index.html HTTP/1.1
		# 以后可能还会出现 get post put del
		# 用户请求的东西通过正则得知
		file_name = ""
		ret = re.match(r"[^/]+(/[^ ]*)", request_lines[0])  # +表示前一个字符至少有一次，*表示前一个字符出现0次或者无限次
		if ret:
			file_name = ret.group(1)
			# print(file_name)
			if file_name == "/":
				file_name = "/index.html"
		# 2. 返回http格式的数据，给浏览器
		# 2.1 如果请求的资源不是以.py结尾，那么就认为是静态资源，如html/css/js/png,jpg等
		if not file_name.endswith(".py"):  # 判断以什么什么结尾
			try:
				f = open("./static" + file_name, "rb")
			except:
				response = "HTTP/1.1 404 NOT FOUND\r\n"
				response += "\r\n"
				response += "-----file not found-----"
				new_socket.send(response.encode("utf-8"))
			else:
				html_content = f.read()
				f.close()
				# 2.1 准备发送给浏览器的数据---header
				response = "HTTP/1.1 200 ok\r\n"    # \r\n表示换行
				response += "\r\n"         # 空了一行才表示http头部结束
				# 2.2 准备发送给浏览器的数据---body
				# response += "<h1>hahaha</h1>"
				# 将response header发送给浏览器
				new_socket.send(response.encode("utf-8"))
				# 将response body发送给浏览器
				new_socket.send(html_content)
		else:
			# 2.2 如果是以.py结尾，那么就认为是动态资源的请求

			# body = "hahaha %s" % time.ctime()
			# if file_name == "/login.py":
			# 	body = mini_frame.login()
			# elif file_name == "/register.py":
			# 	body = mini_frame.register()
			env = dict()
			env['PATH_INFO'] = file_name
			# {'PATH_INFO': "/index.py"}
			body = dynamic.mini_frame.application(env, self.set_response_header)

			header = "HTTP/1.1 %s\r\n" % self.status

			for temp in self.headers:
				header += "%s:%s\r\n" % (temp[0], temp[1])

			header += "\r\n"

			response = header + body 
			# 发送response给浏览器
			new_socket.send(response.encode("utf-8"))

		
		# 关闭套接字
		new_socket.close()

	def set_response_header(self, status, headers):
		self.status = status
		self.headers = [("server", "mini_web v8.8")]
		self.headers += headers


	def run_forever(self):
		"""用来完成整体的控制"""

		while True:
			# 4. 等待新客户端的链接
			new_socket, client_addr = self.tcp_server_socket.accept()

			# 5. 为这个客户端服务
			p = multiprocessing.Process(target=self.service_client, args=(new_socket,))
			p.start()
			
			new_socket.close()  # 主进程调用close，简而言之和子线程共享一份资源，子线程会copy一份资源，但是子线程关闭后，主线程不关闭则会一直占据资源，所以浏览器会一直转圈
			

		# 关闭监听套接字
		self.tcp_server_socket.close()


def main():
	"""控制整体，创建一个web 服务器对象， 然后调用这个对象的run_forever方法运行"""
	wsgi_server = WSGIServer()
	wsgi_server.run_forever()


if __name__ == "__main__":
	main()



2. mini_frame.py：

 def index():
	with open("./templates/index.html", 'r', encoding='utf-8') as f:  # 在linux里，这里文件的目录位置是根据web_server文件的位置来看的，所以只用了一个.
		content = f.read()
	return content

def center():
	with open("./templates/center.html", 'r', encoding='utf-8') as f:  # 在linux里，这里文件的目录位置是根据web_server文件的位置来看的，所以只用了一个.
		return f.read()
	 
def application(env, start_response):
	start_response('200 OK',  [('Content-Type', 'text/html;charset=utf-8')])
	
	file_name = env['PATH_INFO']
	# 如果file_name = "/index.py"
	if file_name == "/index.py":
		return index()
	elif file_name == "/center.py":
		return center()
	else: 
		return 'Hello World! 我爱你中国....'



eg:09-运行web服务器时指定端口以及框架
1. web_server.py

import socket
import re
import multiprocessing
import time
# import dynamic.mini_frame
import sys


class WSGIServer(object):
    def __init__(self, port, app):
        # 1. 创建套接字
        self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

        # 2. 绑定
        self.tcp_server_socket.bind(("", port))

        # 3. 变为监听套接字
        self.tcp_server_socket.listen(128)

        self.application = app

    def service_client(self, new_socket):
        """为这个客户端返回数据"""

        # 1. 接收浏览器发送过来的请求 ，即http请求  
        # GET / HTTP/1.1
        # .....
        request = new_socket.recv(1024).decode("utf-8")
        # print(">>>"*50)
        # print(request)

        request_lines = request.splitlines()
        print("")
        print(">"*20)
        print(request_lines)

        # GET /index.html HTTP/1.1
        # get post put del
        file_name = ""
        ret = re.match(r"[^/]+(/[^ ]*)", request_lines[0])
        if ret:
            file_name = ret.group(1)
            # print("*"*50, file_name)
            if file_name == "/":
                file_name = "/index.html"

        # 2. 返回http格式的数据，给浏览器
        # 2.1 如果请求的资源不是以.py结尾，那么就认为是静态资源（html/css/js/png，jpg等）
        if not file_name.endswith(".py"):
            try:
                f = open("./static" + file_name, "rb")
            except:
                response = "HTTP/1.1 404 NOT FOUND\r\n"
                response += "\r\n"
                response += "------file not found-----"
                new_socket.send(response.encode("utf-8"))
            else:
                html_content = f.read()
                f.close()
                # 2.1 准备发送给浏览器的数据---header
                response = "HTTP/1.1 200 OK\r\n"
                response += "\r\n"
                # 2.2 准备发送给浏览器的数据---boy
                # response += "hahahhah"

                # 将response header发送给浏览器
                new_socket.send(response.encode("utf-8"))
                # 将response ic.mini_frame.applicationbody发送给浏览器
                new_socket.send(html_content)
        else:
            # 2.2 如果是以.py结尾，那么就认为是动态资源的请求

            env = dict()  # 这个字典中存放的是web服务器要传递给 web框架的数据信息
            env['PATH_INFO'] = file_name
            # {"PATH_INFO": "/index.py"}
            # body = dynamic.mini_frame.application(env, self.set_response_header)
            body = self.application(env, self.set_response_header)

            header = "HTTP/1.1 %s\r\n" % self.status

            for temp in self.headers:
                header += "%s:%s\r\n" % (temp[0], temp[1])

            header += "\r\n"

            response = header+body
            # 发送response给浏览器
            new_socket.send(response.encode("utf-8"))


        # 关闭套接
        new_socket.close()

    def set_response_header(self, status, headers):
        self.status = status
        self.headers = [("server", "mini_web v8.8")]
        self.headers += headers
        

    def run_forever(self):
        """用来完成整体的控制"""

        while True:
            # 4. 等待新客户端的链接
            new_socket, client_addr = self.tcp_server_socket.accept()

            # 5. 为这个客户端服务
            p = multiprocessing.Process(target=self.service_client, args=(new_socket,))
            p.start()

            new_socket.close()


        # 关闭监听套接字
        self.tcp_server_socket.close()


def main():
    """控制整体，创建一个web 服务器对象，然后调用这个对象的run_forever方法运行"""
    if len(sys.argv) == 3:  # python3运行，后面所跟的三位参数
        try:
            port = int(sys.argv[1])  # 7890
            frame_app_name = sys.argv[2]  # mini_frame:application
        except Exception as ret:
            print("端口输入错误。。。。。")
            return
    else:
        print("请按照以下方式运行:")
        print("python3 xxxx.py 7890 mini_frame:application")
        return
    
    # mini_frame:application
    ret = re.match(r"([^:]+):(.*)", frame_app_name)
    if ret:
        frame_name = ret.group(1)  # mini_frame, 导入模块不加.py后缀
        app_name = ret.group(2)  # application
    else:
        print("请按照以下方式运行:")
        print("python3 xxxx.py 7890 mini_frame:application")
        return


    sys.path.append("./dynamic")

    # import frame_name --->找frame_name.py
    frame = __import__(frame_name)  # 返回值标记这 导入的这个模块，导入模块不加.py后缀
    app = getattr(frame, app_name)  # 此时app就指向了 dynamic/mini_frame模块中的application这个函数

    # print(app)

    wsgi_server = WSGIServer(port, app)
    wsgi_server.run_forever()


if __name__ == "__main__":
    main()



2.  test.py：

import sys

print(sys.argv)

# 运行次程序的方式： python3 xxx.py haha 7890


3. mini_frame.py：

import re

def index():
    with open("./templates/index.html") as f:
        content = f.read()

    my_stock_info = "哈哈哈哈 这是你的本月名称....."

    content = re.sub(r"\{%content%\}", my_stock_info, content)  # 在templates里的index.html里有｛%content%｝，所以是匹配的它，\ 是转义{}符

    return content
     

def center():
    with open("./templates/center.html") as f:
        content = f.read()

    my_stock_info = "这里是从mysql查询出来的数据。。。"

    content = re.sub(r"\{%content%\}", my_stock_info, content)

    return content
     

def application(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/html;charset=utf-8')])
    
    file_name = env['PATH_INFO']
    # file_name = "/index.py"

    if file_name == "/index.py":
        return index()
    elif file_name == "/center.py":
        return center()
    else:
        return 'Hello World! 我爱你中国....'





