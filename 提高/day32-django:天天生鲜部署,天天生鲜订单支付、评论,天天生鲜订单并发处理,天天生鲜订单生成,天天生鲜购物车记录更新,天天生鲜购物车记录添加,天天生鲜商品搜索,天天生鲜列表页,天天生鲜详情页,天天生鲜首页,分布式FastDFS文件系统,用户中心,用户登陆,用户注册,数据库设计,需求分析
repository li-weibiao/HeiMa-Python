1.需求分析
天天生鲜：商业模式
web项目开发流程
需求分析
架构预览
架构设计

2.数据库设计
天天生鲜：数据库设计
模型类设计
链接远程数据库
choices选项和富文本编辑器
项目框架搭建

电商sku,spu表


建立四个应用：
 (dailyfresh) smartli: dailyfresh smart$ python manage.py startapp user
 (dailyfresh) smartli: dailyfresh smart$ python manage.py startapp goods
 (dailyfresh) smartli: dailyfresh smart$ python manage.py startapp cart
 (dailyfresh) smartli: dailyfresh smart$ python manage.py startapp order
 (dailyfresh) smartli: dailyfresh smart$ la


新建python的package,apps,然后将四个应用拖到apps目录下



3.用户注册
天天生鲜：注册基本逻辑
02_显示注册页面和注册处理使用同一个url地址
类视图使用
类视图原理
生成激活用户token
注册用户激活流程
django内置函数发送激活邮件
用户注册流程小结
09_celery异步发送邮件（新建python包【new package】，celery_tasks，然后新建python文件，tasks来发布任务）
10_celery使用流程小结


启动celery工作者(任务处理者),需要有celery环境，然后在shell终端：
celery -A celery_tasks.tasks worker -l info

(若有需要请百度，或者重看视频)


4.用户登陆
登陆基本逻辑
配置redis作为django缓存和session存储后端
记住用户名



5.用户中心
父模版页抽象
用户中心页面显示
03_登录装饰器和登录后页面跳转
04_LoginRequiredMixin类的使用
05_LoginRequiredMixin类的原理
登录后欢迎信息
07_退出用户登录
08_登录判断_欢迎信息_退出登录小结
09_用户中心_地址页
10_模型管理器类方法封装
11_用户中心_个人信息页
12_历史记录存储格式设计
13_获取用户历史浏览记录



6.分布式FastDFS文件系统
01_FastDFS文件系统简介
02_FastDFS上传文件和下载文件流程
03_FastDFS的安装和配置
04_Nginx配合FastDFS使用的安装和配置
05_python和FastDFS交互
06_虚拟机中FastDFS配置文件的修改
07_项目中上传和使用图片的流程
08_自定义文件存储类
09_amdin页面测试文件存储类
10_改进自定义文件存储类
11_FastDFS上传图片小结



7.天天生鲜首页
01_页面静态化_celery生成首页静态页面
02_配置nginx提交静态页面
03_admin管理更新首页数据表数据时重新生成index静态页面
04_静态index页面和IndexView的调度说明
05_首页数据缓存设置和获取
06_首页缓存数据的更新
07_页面静态化和缓存数据_小结
08_商品模型模型类概述
09_首页内容获取和展示
10_首页内容获取和展示小结
11_redis存储购物车记录分析
12_首页获取购物车商品数目




8.天天生鲜详情页
01_用户历史浏览记录的添加
02_商品详情信息的获取和显示
03_获取同一SPU的其他规格的商品信息




9.天天生鲜列表页
01_列表页页码控制
02_商品列表页内容的获取和显示



10.天天生鲜商品搜索
01_商品搜索_全文检索概念
02_商品搜索_全文检索框架和引擎的安装和配置
03_商品搜索_生成索引文件
04_商品搜索_全文检索的使用
05_商品搜索_更改分词方式
06_商品搜索_小结



11.天天生鲜购物车记录添加
01_商品详情页js代码
02_购物车记录添加后台view
03_购物车记录添加前端js
04_购物车记录添加_小结
05_购物车页面显示




12.天天生鲜购物车记录更新
01_购物车js_全选_全不选_商品的选中和不选中
02_购物车记录更新_后台view
03_购物车记录更新_前端数目增加js
04_购物车记录更新_前端数目减少_手动输入js
05_购物车记录删除_后台view
06_购物车记录删除_前端js
07_购物车模块_小结




13.天天生鲜订单生成
01_订单生成_mysql事务概念
02_订单生成_django中使用事务
03_提交订单页面显示
04_创建订单前端js
05_创建订单后台view




14-天天生鲜订单并发处理
01_订单生成_订单并发问题
02_订单并发_悲观锁
03_订单并发_乐观锁
04_订单并发_总结




15-天天生鲜订单支付、评论
01_订单支付_获取支付结果
02_用户中心-订单页面
03_订单支付_支付宝简介
04_订单支付_网站对接支付宝流程图
05_订单支付_订单支付代码



16-天天生鲜部署
01_订单评论代码走读
02_部署_uwsgi作为web服务器
03_部署_基本部署架构解析
04_部署_nginx转交请求给uwsgi
05_部署_nginx配置处理静态文件
06_部署_nginx转交请求给其他地址
07_部署_nginx配置upstream实现负载均衡
08_部署_小结




17-天天生鲜项目总结
01_天天生鲜项目_总结


个人总结：
静态页面以及文件放在nginx服务器里面，访问动态就让nginx将要求转发给uwsgi服务器，由uwsgi服务器来调用application,总而联系django项目，然后由django服务器来返回信息。
