 .exe文件是二进制文件

程序运行起来叫进程，让操作系统去调度



进程以及状态
1.进程
程序:例如xxx.py这是程序是一个静态的
进程:一个程序运行起来后,代码+用到的资源称之为进程它是操作系统分配资源的基本单元
不仅可以通过线程完成多任务,进程也是可以的

2.进程的状态
工作中任务数往往大于cpu的核数,即一定有一些任务正在执行,而另外一些任务在等待cpu进行执行,
因此导致了有了不同的状态

·就绪态:运行的条件都已经慢去,正在等在cpu执行
-执行态:cpu正在执行其功能
·等待态:等待某些条件满足,例如一个程序 sleep了此时就处于等待态



进程的创建-multiprocessing
multiprocessing模块就是跨平台版本的多进程模块,提供了一个 Process类来代表一个进程对象,这个对
象可以理解为是一个独立的进程,可以执行另外的事情

1.   2个 while循环一起执行:
# -*- coding:utf-8 -*-
from multiprocessing import Process
import time
 
def run_proc():
    """子进程要执行的代码"""
    while True:
        print("----2----")
        time.sleep(1)
 
if  __name__ ==  "__main__":
    p = Process( target=run_proc)
    p.start()
    while True:
        print("--1---)
        time. sleep(1)

说明
.创建子进程时,只需要传入一个执行函数和函数的参数,创建一个 Process().start实例,用方法启动

代码+资源=进程，进程跟线程比起来，耗费的资源比较大

进程、线程对比：
功能：进程--能够完成版多任务，比如在一台电脑上能够同时运行多个qq
           线程--能够完成多任务，比如一个qq中的多个聊天窗口

线程实现多任务，即是在一份资源里，在一个进程中，多个箭头来实现任务(这个箭头是讲课老师的标记)

进程实现多任务，就是在多份资源里，每份资源都有一个箭头去实现任务

代码-->进程(进程是分配资源的单位，线程是得到资源的单位，由操作系统来调度，所以说一个进程里至少包含一个主线程)

一个程序至少有一个进程，一个进程至少有一个线程。
线程的划分尺度小于进程(资源比进程少)，使得多线程程序的并发性高。
进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大的提高了程序的运行效率
（没有进程就不会有线程）

线程不能够独立执行，必须依存在进程中
可以将进程理解为工厂中的一条流水线，而其中的线程就是这个流水线上的工人

优缺点：
线程和进程在使用上各有优缺点，线程执行开销小，但不利于资源的管理和保护，而进程正相反


2.进程pid
# -*- coding:utf-8 -*-
from multiprocessing import Process
import os
import time
 
def run_proc():
    """子进程要执行的代码"""
    print("子进程运行中, pid=%d...' % os.getpid())  #os.getpid获取当前进程的进程号
    print("子进程将要结束..")
 
if __name__ == "__main__":
    print('进程pid: %d '  %  os.getpid())    # os.getpid获取当前进程的进程号
    p = Process(target=run_proc)
    p.start()


3. Process语法结如下:
 Process([group [ ,target [ ,name [ ,args [ ,kwargs1]]]]])
 target: 如果传递了函数的引用，可以任务这个子进程就执行这里的代码
 args: 给 target指定的函数传递的参数，以元组的方式传递
 kwargs: 给 target指定的函数传递命名参数
 name: 给进程设定一个名字,可以不设定
 group: 指定进程组,大多数情况下用不到
 
Process创建的实例对象的常用方法:
。start: 启动子进程实例(创建子进程)
。is_alive0: 判断进程子进程是否还在活着
。join([timeout]): 是否等待子进程执行结束或等待多少秒



eg: 使用进程实现多任务.py

import threading
import time
import multiprocessing


def test1():
	while True:
		print("1-----")
		time.sleep(1)


def test2():
	while True:
		print("2-----")
		time.sleep(1)


def main():
	# t1 = threading.Thread(target=test1)
	# t2 = threading.Thread(target=test2)
	# t1.start()
	# t2.start()

    p1 = multiprocessing.Process(target=test1)   # process是个类
	p2 = multiprocessing.Process(target=test2)
	p1.start()
	p2.start()


if __name__ == "__main__":
	main()



笔记：
# 进程之间是独立的，单个进程之间的线程是可以共享内容的
# socket是进程之间通信的一个手段
# 通过文件也可以完成进程之间的通信，比如一个文件保存在硬盘里，然后独立的进程都可以来读取它


====================================================================


进程间通信-Queue
Process之间有时需要通信,操作系统提供了很多机制来实现进程间的通信

1. Queue的使用
可以使用 multiprocessing模块的Queue实现多进程之间的数据传递, Queue本身是一个消息列队程序,首
先用一个小实例来演示一下 Queue的工作原理:
 
# coding=utf-8
from multiprocessing import Queue
q = Queue(3)        #初始化一个Queue对象最多可接收三条put消息
q.put(消息1)
q.put("消息2)
print(q. full())     #False
q.put(消息3)
print(q. full())     #True

#因为消息列队已满下面的try都会抛出异常,第一个try会等待2秒后再抛出异常,第二个try会立刻抛出异常
try:
    q.put("消息4", True, 2)
except:
    print("消息列队已满,现有消息数量: %s", % q.qsize())
 
try:
    q.put_nowait("消息4")
except:
    print("消息列队已满·现有消息数量: %s" % q.qsize())


# 推荐的方式。先判断消息列队是否已满，再写入

if not q.full():
    q.put_nowait("消息4")

# 读取消息时，先判断消息列队是否为空，再读取

if not q.empty():
    for i in range(q.qsize()):
        print(q.get_nowait())



eg: 多进程之间通过Queue来实现数据共享.py

import multiprocessing


def download_from_web(q):
	"""下载数据"""
	# 模拟从网上下载的数据
	data = [11, 22, 33, 44]

	# 向队列中写入数据
	for temp in data:
		q.put(temp)

	print("---下载器已经下载完了数据并且存入到队列中---")


def analysis_data(q):
	"""数据处理"""
	waitting_analysis_data = list()   # list()创建一个空列表，与[]效果一样，但可读性更强

	# 从队列中获取数据
	while True:
		data = q.get()
		waitting_analysis_data.append(data)

		if q.empty():
			break

	# 模拟数据处理 
	print(waitting_analysis_data)


def main():
	# 1. 创建一个队列
	q = multiprocessing.Queue()    # 不传递参数，默认最大队列，根据内存自动得出

	# 2. 创建多个进程，将队列的引用当作实参进行传递到里面
	p1 = multiprocessing.Process(target=download_from_web, args=(q,))
	p2 = multiprocessing.Process(target=analysis_data, args=(q,))
	p1.start()
	p2.start()


if __name__ == "__main__":
	main()


# 在同一个电脑上，通过Queue来进行进程间的通信



进程池Pool
当需要创建的子进程数量不多时,可以直接利用 multiprocessing中的Process动态生成多个进程·但如果
是上百甚至上千个目标手动的创建进程的工作量巨大,此时就可以用到 multiprocessing模块提供的
Pool方法

初始化Pool时,可以指定一个最大进程数，当有新的请求提交到Pool中时,如果池还没有满,那么就会创
建一个新的进程用来执行该请求; 但如果池中的进程数已经达到指定的最大值,那么该请求就会等待直
到池中有进程结束,才会用之前的进程来执行新的任务,请看下面的实例

# -*- coding:utf-8 -*-
from multiprocessing import Pool
import os, time, random
 
def worker(msg)：
    t_start = time.time()
    print(" %s开始执行,进程号为%d" % (msg, os.getpid()))
    # random.random()随机生成~1之间的浮点数
    time.sleep( random.random() *2)
    print(msg, "执行完毕,耗时%0.2f" % (t_stop-t_ start))

po = pool(3)   # 定义一个进程池,最大进程数3
for i in range(0,10):
    # pool().apply_async(要调用的目标,(传给目标的参数元组,))
    # 每次循环将会用空闲出来的子进程去调用目标
     po.apply_async(worker,  (i, ))     # 往池里添加任务，worker是上面定义的函数
 
print("--start-")
po.close()  # 关闭进程池，关闭后po不再接收新的请求
po.join()    # 等待po中所有子进程执行完成，必须放在 close语句之后
print("——end——”)


# 有固定进程数的时候，就不用采用进程池了,任务数不确定，就采用进程池



应用:文件夹copy器(多进程版)
import multiprocessing
import os
import time
import random
 
def copy_file(queue, file_name, source_folder_name, dest_folder_name):
   """copy文件到指定的路径"""
    f_read = open(source_ foldername+"/"+file_name, "rb")
    f_write = open(dest_folder_name +"/" +file_name, "wb")
    while True:
         time.sleep(random.random())
         content = f_read.read(1024)
         if content:
              f_write.write(content)
         else:
              break
 
f_read.close()
f_write.close()

# 发送已经拷贝完毕的文件名字
queue.put(file_name)
 
def main():
    #  获取要复制的文件
    source_folder_name = input("请输入要复制文件夹名字:")

    # 整理目标文件夹
    dest_folder_name = source_folder_name + "[副本]"

========================================

eg:  多任务文件夹copy.py

import os
import multiprocessing


def copy_file(file_name, old_folder_name, new_folder_name):
	"""完成文件的复制"""
	print("====>模拟copy文件： 从%s--->到%s   文件名是:%s" % (old_folder_name, new_folder_name, file_name))
	old_f = open(old_folder_name + "/" + file_name, "rb")
	content = old_f.read()
	old_f.close()

	new_f = open(new_folder_name + "/" + file_name, "wb")
	new_f.write(content)
	new_f.close()


def main():
	# 1. 获取用户要copy的文件夹的名字
	old_folder_name = input("请输入要copy的文件夹的名字:")

	# 2. 创建一个新的文件夹
	try:
		new_folder_name = old_folder_name + "[复件]"
		os.mkdir(new_folder_name)
	except:
		pass

	# 3. 获取文件夹的所有的待copy的文件名字  listdir()
	file_names = os.listdir(old_folder_name)   # listdir()返回的是列表值
	print(file_names)

	# 4. 创建进程池
	po = multiprocessing.Pool(5)

	# 5. 向进程池中添加 copy文件的任务
	for file_name in file_names:
		po.apply_async(copy_file, args=(file_name, old_folder_name, new_folder_name))

	# 复制原文件夹中的文件，到新文件夹中的文件去


	po.close()  # 不再接收新任务
	po.join()   # 保证之前的任务能够完成


if __name__ == "__main__":
	main()




eg: 案例：多任务文件夹copy-v2-显示进度

import os
import multiprocessing


def copy_file(q, file_name, old_folder_name, new_folder_name):
	"""完成文件的复制"""
	# print("====>模拟copy文件： 从%s--->到%s   文件名是:%s" % (old_folder_name, new_folder_name, file_name))
	old_f = open(old_folder_name + "/" + file_name, "rb")
	content = old_f.read()
	old_f.close()

	new_f = open(new_folder_name + "/" + file_name, "wb")
	new_f.write(content)
	new_f.close()

	# 如果拷贝完了文件， 那么就向队列中写入一个消息，表示已经完成
	q.put(file_name)


def main():
	# 1. 获取用户要copy的文件夹的名字
	old_folder_name = input("请输入要copy的文件夹的名字:")

	# 2. 创建一个新的文件夹
	try:
		new_folder_name = old_folder_name + "[复件]"
		os.mkdir(new_folder_name)
	except:
		pass

	# 3. 获取文件夹的所有的待copy的文件名字  listdir()
	file_names = os.listdir(old_folder_name)   # listdir()返回的是列表值
	# print(file_names)

	# 4. 创建进程池
	po = multiprocessing.Pool(5)

	# 5. 创建一个队列
	q = multiprocessing.Manager().Queue()    # 有进程池，使用Manager中的Queue，manager()是类，通过类调用Queue的方法

	# 6. 向进程池中添加 copy文件的任务
	for file_name in file_names:
		po.apply_async(copy_file, args=(q, file_name, old_folder_name, new_folder_name))

	# 复制原文件夹中的文件，到新文件夹中的文件去


	po.close()
	# po.join()
	all_file_num = len(file_names)  # 测一下所有的文件个数
	copy_ok_num = 0
	while True:
		file_name = q.get()
		# print("已经完成copy: %s" % file_name)
		copy_ok_num += 1
		print("\r拷贝的进度为: %.2f %%" % (copy_ok_num*100/all_file_num), end='')   # \r 表示将光标的位置回退到本行的开头位置
		if copy_ok_num >= all_file_num:
			break

	print()


if __name__ == "__main__":
	main()



***注意： 思维转换，注重编程流程***

===================================================
\r和\b的用法:

\r 表示将光标的位置回退到本行的开头位置
\b表示将光标的位置回退一位

参考: https://www.cnblogs.com/zzliu/p/10156658.html


