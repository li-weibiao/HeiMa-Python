迭代器
迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第
一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。

1.可迭代对象
我们已经知道可以对 list ，tuple ，str等类型的数据使用 for...in.的循环语法从其中依次拿到数据进行使用
我们把这样的过程称为遍历,也叫迭代
但是,是否所有的数据类型都可以放到for  in 语句中,然后让for....in,,,每次从中取出一条数据供我们使
用即供我们迭代吗?

>> for i in 100:
        print(i)
 Traceback(most recent call last):
 File "<stdin>", line 1, in <module>
 TypeError: 'int' object is not iterable
>>
# int整型不是iterable，即int整型不是可以迭代的

# 我们自定义一个容器MyList用来存放数据,可以通过add方法向其中添加数据
 >> class MyList(object)
       def __init__(self):
           self. container= []
       def add(self, item):
           self.container.append(item)
 >> mylist = MyList()
 >> mylist. add(1)
 >> mylist, add(2)
 >> mylist. add(3)
 >> for num in mylist:
          print(num)



1.判断xxxx_obj是否是可以迭代(类里面有__iter__方法吗？)
2.在第一步成立的前提现，调用iter函数得到xxxx_obj对象的__iter__方法的返回值
3. __iter__方法的返回值是一个迭代器


eg:  自己实现一个可以迭代的对象-1.py

import time
from collections import Iterable
from collections import Iterator


class Classmate(object):
	def __init__(self):    # 定义属性
		self.names = list()


	def add(self, name):
		self.names.append(name)   # 定义方法


	def __iter__(self):
		"""如果想要一个对象成为一个，可以迭代的对象，即可以使用for，那么必须实现__iter__方法"""
		return classIterator()  # 返回对象的引用, 创建了一个classIterator类的实例对象


class classIterator(object):
	def __iter__(self):    # 必须有
		pass


	def __next__(self):    # 必须有
		return 11	


classmate = Classmate()    # 创建实例对象

classmate.add("明日香")
classmate.add("凌波丽")
classmate.add("御坂美琴")

# print("判断classmate是否是可以迭代的对象:", isinstance(classmate, Iterable))  # 把这当成了一个元组，逗号左边是一个数据，逗号右边是另一个数据
# classmate_iterator = iter(classmate)     # iter() 函数用来生成迭代器，自动调用__iter__方法
# print("判断classmate_iterator是否是迭代器:", isinstance(classmate_iterator, Iterator))
# print(next(classmate_iterator))

# iter(classmate)     # 自动调用__iter__方法

for name in classmate:   # for循环调用__next__方法 
 	print(name)
 	time.sleep(1)



eg:  自己实现一个可以迭代的对象-2.py， 实现循环取值以及抛出异常自动退出for循环

import time
from collections import Iterable
from collections import Iterator


class Classmate(object):
	def __init__(self):    # 定义属性
		self.names = list()


	def add(self, name):
		self.names.append(name)   # 定义方法


	def __iter__(self):
		"""如果想要一个对象成为一个，可以迭代的对象，即可以使用for，那么必须实现__iter__方法"""
		return ClassIterator(self)  # 返回对象的引用, 创建了一个classIterator类的实例对象


class ClassIterator(object):
	def __init__(self, obj):    # 这里的obj也就作为了Classmate类的参数传了进来，因此ClassIterator类可以调用Classmate类的属性了
		self.obj = obj
		self.current_num = 0

	def __iter__(self):    # 必须有
		pass


	def __next__(self):    # 必须有
		if self.current_num < len(self.obj.names):
			ret = self.obj.names[self.current_num]
			self.current_num += 1
			return ret
		else:
			raise StopIteration	   # 抛出异常，则自动停止


classmate = Classmate()    # 创建实例对象

classmate.add("明日香")
classmate.add("凌波丽")
classmate.add("御坂美琴")

# print("判断classmate是否是可以迭代的对象:", isinstance(classmate, Iterable))  # 把这当成了一个元组，逗号左边是一个数据，逗号右边是另一个数据
# classmate_iterator = iter(classmate)   # iter()生成迭代器，自动调用__iter__方法
# print("判断classmate_iterator是否是迭代器:", isinstance(classmate_iterator, Iterator))
# print(next(classmate_iterator))

# iter(classmate)     # 自动调用__iter__方法

for name in classmate:   # for循环调用__next__方法 
 	print(name)
 	time.sleep(1)



eg:  自己实现一个可以迭代的对象-5.py, 简洁版

import time
from collections import Iterable
from collections import Iterator


class Classmate(object):
	def __init__(self):    # 定义属性
		self.names = list()
		self.current_num = 0


	def add(self, name):
		self.names.append(name)   # 定义方法


	def __iter__(self):    # 必须有，判断一个对象能否迭代，首先判断这个__iter__方法有没有，然后便是判断__next__方法有没有
		"""如果想要一个对象成为一个，可以迭代的对象，即可以使用for，那么必须实现__iter__方法"""
		return self  # 返回自己，然后调用__next__方法


	def __next__(self):    # 必须有
		if self.current_num < len(self.names):
			ret = self.names[self.current_num]
			self.current_num += 1
			return ret
		else:
			raise StopIteration	   # 抛出异常，则自动停止


classmate = Classmate()    # 创建实例对象

classmate.add("明日香")
classmate.add("凌波丽")
classmate.add("御坂美琴")

# print("判断classmate是否是可以迭代的对象:", isinstance(classmate, Iterable))  # 把这当成了一个元组，逗号左边是一个数据，逗号右边是另一个数据
# classmate_iterator = iter(classmate)
# print("判断classmate_iterator是否是迭代器:", isinstance(classmate_iterator, Iterator))
# print(next(classmate_iterator))

# iter(classmate)     # 自动调用__iter__方法

for name in classmate:   # for循环调用__next__方法 
 	print(name)
 	time.sleep(1)



总结： 学迭代器，是因为迭代器能实现数据，而且不需要那么多的空间（占用极少的内存空间）

在python2里：xrange存的不是值，而是生成这个值的方式
                         range返回结果，会占大量空间



8.迭代器的应用场景
我们发现迭代器最核心的功能就是可以通过next0函数的调用来返回下一个数据值，如果每次返回的数据值
不是在一个已有的数据集合中读取的,而是通过程序按照一定的规律计算生成的，那么也就意味着可以不
用再依赖一个已有的数据集合,也就是说不用再将所有要迭代的数据都一次性缓存下来，供后续依次读取
这样可以节省大量的存储(内存)空间
举个例子,比如,数学中有个著名的斐波拉契数列(Fibonacci),数列中第一个数为0,第二个数为1,其
后的每一个数都可由前两个数相加得到:
0,1,1,2,3.5,8,13,21,34
现在我们想要通过 for..in循环来遍历代斐波那契数列中的前n个数·那么这个斐波那契数列我们就可以
用迭代器来实现,每次代都通过数学计算来生成下一个数


eg: 斐波那契数列.py

方法一：
nums = list()

a = 0
b = 1
i = 0

while i < 10:
	nums.append(a)
	a, b = b, a+b
	i += 1


for num in nums:
	print(num)


方法二（迭代，占用内存小）：
class Fibonacci(object):
	def __init__(self, all_num):    # 定义属性
		self.all_num = all_num
		self.current_num = 0
		self.a = 0
		self.b = 1


	def __iter__(self):    # 必须有，判断一个对象能否迭代，首先判断这个__iter__方法有没有，然后便是判断__next__方法有没有
		return self


	def __next__(self):    # 必须有
		if self.current_num < self.all_num:
			ret = self.a
			self.a, self.b = self.b, self.a+self.b
			self.current_num += 1
			return ret
		else:
			raise StopIteration	   # 抛出异常，则自动停止


fibo = Fibonacci(10)


for num in fibo:   # for循环调用__next__方法 
 	print(num)



2.  并不是只有for循环能接收可迭代对象
除了for循环能接收可迭代对象，list, tuple等也能接收
li = list(FibIterator(15))
print(li)
tp = tuple(FibIterator(6))
print(tp)

***并不是通过list转换而是重新生成列表，元组也一样***



生成器
1.生成器
利用迭代器,我们可以在每次迭代获取数据(通过next()方法) 时按照特定的规律进行生成但是我们在实
现一个代器时,关于当前迭代到的状态，需要我们自己记录,进而才能根据当前状态生成下一个数据。为
了达到记录当前状态,并配合next()函数进行选代使用,我们可以采用更简便的语法,即生成器
(generator)。生成器是一类特殊的代器

2.创建生成器方法1
要创建一个生成器,有很多种方法。第一种方法很简单,只要把一个列表生成式的[]改成()
In [15]: L =[ x*2 for x in range(5)]
In [16]: L
Out[16]: [0,2,4,6,8]
 
In [17]: G=( x*2 for x in range(5))
In [18]:G
Out[18]: <generator object <genexpr at 0x7f626c132db0>
In19]:

创建L和G的区别仅在于最外层的 []和(),L是一个列表而,G是一个生成器·我们可以直接打印出列
表L的每一个元素,而对于生成器G,我们可以按照迭代器的使用方法来使用,即可以通过next()函数for
循环，list()等方法使用

In [19]: next(G)
out[19]: 0

In [20]: next(G)
out[20]: 2



3.创建生成器方法2
generator非常强大。如果推算的算法比较复杂,用类似列表生成式的 for循环无法实现的时候,还可以用
函数来实现
我们仍然用上一节提到的斐波那契数列来举例,回想我们在上一节用迭代器的实现方式:
class Fibiteratorobject):
   """斐波那契数列代器"""
    def init(self, n):
        """
        : param n: int,指明生成数列的前n个数
        """
self. n = n
# current用来保存当前生成到数列中的第几个数了
self.current = 0
#num1用来保存前前一个数,初始值为数列中的第一个数0
self. num1 =0
#num2用来保存前一个数,初始值为数列中的第二个数1
self. num2 =1

def __next__(self):
"""被next()函数调用来获取下一个数"""
    if self.current < self.n:
        num = self. num1
        self.num1, self.num2 = self.num2, self.num1+self.num2
        self. current +=1
        return num
    else:
        raise StopIteration
 
def __iter__(self):
    """迭代器的__iter__返回自身即可"""
    return self


注意，在用迭代器实现的方式中，我们要借助几个变量(n, current, num1, num2)来保存迭代的状态。

还可以用函数来定义生成器：

In[30]: def fib(n):
               current =0
               num1, num2= 0, 1
               while current < n:
                   num = num1
                   num1, num2 = num2, num1+num2
                   current += 1
                   yield num       # 只要有yield函数自然就会变成生成器
                   return 'done'

In[31]: F=fib(5)

In[32]: next(F)
0ut[32]: 1
In [33]:  next(F)
Out[33]:1
In[34]: next(F)
Out34]: 2


eg:  使用生成器完成斐波那契数列.py

def create_num(all_num):
	print("---1---")  #调试代码
	# a = 0
	# b = 1
	a, b = 0, 1
	current_num = 0
	while current_num < all_num:
		print("---2---")
		# print(a)
		yield a  # 如果一个函数中有yield语句，那么这个就不再是函数，而是一个生成器的模版
		print("---3---")
		a, b = b, a+b
		current_num += 1
		print("---4---")

		
# 如果在调用create_num的时候，发现这个函数中有yield那么此时，不是调用函数，而是创建一个生成器对象
obj = create_num(10)

for num in obj:    # 用for循环调用生成器
	print(num)

ret = next(obj)   # 通过next()来执行生成器，类似于调用函数
print(ret)




eg:  通过异常判断生成器已经结束.py

def create_num(all_num):
	
	# a = 0
	# b = 1
	a, b = 0, 1
	current_num = 0
	while current_num < all_num:
		
		# print(a)
		yield a  # 如果一个函数中有yield语句，那么这个就不再是函数，而是一个生成器的模版
		
		a, b = b, a+b
		current_num += 1
	return "ok...."

obj2 = create_num(2)

while True:
	try:
		ret = next(obj2)   
		print("obj2:", ret)
	except Exception as ret:
		print(ret.value)  # 这里便包含了ok...这个返回值，表示整体运行都结束了之后，才返回的值，这里便体现在报错结束之后，返回return的值
		break




4.使用send唤醒
我们除了可以使用next()函数来唤醒生成器继续执行外,还可以使用send()函数来唤醒执行·使用send()函
数的一个好处是可以在唤醒的同时向断点处传入一个附加数据.

例子:执行到 yield时，gen函数作用暂时保存,返回 i 的值; temp接收下次 c.send("python")，send发送过来
的值, c.next()等价c.send(None)

In [10]: def gen():
                i = 0
                while i<5:
                     temp =  yield i
                     print(temp)
                     i+=1

使用send

In[43]: f=gen()

In[44]: next(f)
0ut[44]:0
In [45]: f.send( "haha')
haha



eg: 通过send来启动生成器.py

def create_num(all_num):
    a, b = 0, 1
    current_num = 0
    while current_num < all_num:
        ret = yield a
        print(">>>ret>>>>", ret)
        a, b = b, a+b
        current_num += 1

obj = create_num(10)

# obj.send(None)  # send一般不会放到第一次启动生成器，如果非要这样做 那么传递None

ret = next(obj)
print(ret)

# send里面的数据会 传递给第5行，当做yield a的结果，然后ret保存这个结果,,, 
# send的结果是下一次调用yield时 yield后面的值
ret = obj.send("hahahha")  
print(ret)


# next()不能传参数，send()可以传参数
# 生成器与yield有关，可以暂停返回值，可以联想一下return，但是有区别


总结: 生成器和迭代器都是保存代码，而不是保存结果



1. yield 协程
eg: 使用yield完成多任务.py

import time


def task_1():
	while True:
		print("---1---")
		time.sleep(0.1)
		yield


def task_2():
	while True:
		print("---2---")
		time.sleep(0.1)
		yield


def main():
	t1 = task_1()
	t2 = task_2()
	# 先让t1运行一会，当t1中遇到yield的时候，再返回到24行(while True)，然后
	# 执行t2，当它遇到yield的时候，再次切换到t1中
	# 这样t1/t2/t1/t2的交替运行，最终实现了多任务...协程
	while True:
		next(t1)
		next(t2)


if __name__ == "__main__":
	main()


# 协程也是可以用于多任务，但他属于并发，也就是交替执行任务，跟进程和线程比起来，所占内存资源更小



2. greenlet 协程
为了更好使用协程来完成多任务，python中的 greenle模块对其封装,从而使得切换任务变的更加简单
安装方式
用如下命令安装 greenlet模块：
sudo pip3 install greenlet
 
#coding=utf-8
from greenlet import greenlet    # greenlet是一个类,作用是封装，然后代码里就不用出现yield了
import time
 
def test1():
    while True:
        print ("---A--")
        gr2.switch()       # 单线程，一个任务一个任务的做，这里调用gr2
        time.sleep(0.5)
 
def test2():
    while True:
        print ("---B--")
        gr1. switch()    # 这里调用gr1,实现了循环调用
        time. sleep(0.5)
 
gr1= greenlet(test1)    # 返回值是greenlet的对象
gr2= greenlet(test2)

#切换到gr1中运行
gr1.switch()



3. gevent  协程（并发库）
greenlet已经实现了协程,但是这个还的人工切换,是不是觉得太麻烦了,不要捉急,python还有一个比
greenlet更强大的并且能够自动切换任务的模块 gevent

其原理是当一个 greenlet遇到 lO(指的是input output输入输出,比如网络文件操作等)操作时,比如访问
网络,就自动切换到其他的 greenlet,等到 IO操作完成,再在适当的时候切换回来继续执行

由于 IO操作非常耗时,经常使程序处于等待状态,有了 gevent为我们自动切换协程,就保证总有greenlet在
运行,而不是等待IO

安装
 pip3 install gevent

1. gevent的使用
import gevent
 
def f(n):
    for i in range(n):
        print(gevent.getcurrent(), i)

g1 = gevent.spawn(f, 5)      # spawn产卵，其中f 就是指定义的def f()函数，5是传递的参数，次数，代码运行到这里，并不会执行，这里是创建了greenlet的对象
g2 = gevent.spawn(f, 5)
g3 = gevent.spawn(f, 5)
 
g1.join()     # 等待g1执行完
g2.join()
g3.join()


# 使用gevent协程其实是利用了延时时间来运行，在等待的时间内就去做其他的任务


eg:  使用gevent实现多任务.py

import gevent
import time


def f1(n):
    for i in range(n):
        print(gevent.getcurrent(), i)
        # time.sleep(0.5)
        gevent.sleep(0.5)

def f2(n):
    for i in range(n):
        print(gevent.getcurrent(), i)
        # time.sleep(0.5)
        gevent.sleep(0.5)

def f3(n):
    for i in range(n):
        print(gevent.getcurrent(), i)
        # time.sleep(0.5)
        gevent.sleep(0.5)

print("----1---")
g1 = gevent.spawn(f1, 5)
print("----2---")
g2 = gevent.spawn(f2, 5)
print("----3---")
g3 = gevent.spawn(f3, 5)
print("----4---")
g1.join()
g2.join()
g3.join()


3.给程序打补丁
from gevent import monkey
import gevent
import random
import time

# 有耗时操作时需要
monkey.patch_all()  # 将程序中用到的耗时操作的代码，换位gevent中自己实现的模块

def coroutine_work(coroutine_name):
    for i in range(10):
        print(coroutine_name, i)
        time.sleep(random.random())
 
gevent.joinall([            # joinall等待所有
    gevent.spawn(coroutine_work, "work1"),
    gevent.spawn(coroutine_work, "work2")
])



eg:  gevent打补丁.py

import gevent
import time
from gevent import monkey

monkey.patch_all()


def f1(n):
    for i in range(n):
        print(gevent.getcurrent(), i)
        time.sleep(0.5)

def f2(n):
    for i in range(n):
        print(gevent.getcurrent(), i)
        time.sleep(0.5)

def f3(n):
    for i in range(n):
        print(gevent.getcurrent(), i)
        time.sleep(0.5)

print("----1---")
g1 = gevent.spawn(f1, 5)
print("----2---")
g2 = gevent.spawn(f2, 5)
print("----3---")
g3 = gevent.spawn(f3, 5)
print("----4---")
g1.join()
g2.join()
g3.join()



并发下载器
并发下载原理:
from gevent import monkey
import gevent
import urllib.request

#有耗时操作时需要
monkey.patch_all()
 
def my_downLoad(url):
     print("GET: %s" % url)
     resp = urllib.request.urlopen(url)
     data = resp.read()
     print(" %d bytes received from %s.' % (len(data), url))
 
gevent.joinall([
    gevent.spawn(my_download, 'http: //www.baidu.com/'),
    gevent.spawn(my_downLoad,'http: //www,itcast. cn/'),
    gevent.spawn(my_download, 'http: //www. itheima. com/'),
])



eg: 图片下载器（gevent_img_downloader.py）

import urllib.request
import gevent
from gevent import monkey

monkey.patch_all()


def downloader(img_name, img_url):
	req = urllib.request.urlopen(img_url)

	img_content = req.read()

	with open(img_name, "wb") as f:
		f.write(img_content)


def main():
	gevent.joinall([
			gevent.spawn(downloader, "1.jpg", "https://vi1.xiu123.cn/live/2020/10/09/17/1010v1602235502907132463_s.jpg"),
			gevent.spawn(downloader, "2.jpg", "https://p0.ssl.qhimgs1.com/sdr/400__/t011659f9a36ecc5e40.jpg"),
	])		


if __name__ == "__main__":
	main()




进程线程丶协程对比
请仔细理解如下的通俗描述
。有一个老板想要开个工厂进行生产某件商品(例如剪子)
。他需要花一些财力物力制作一条生产线，这个生产线上有很多的器件以及材料，这些所有的为了能够生
产剪子而准备的资源称之为:进程
。只有生产线是不能够进行生产的,所以老板的找个工人来进行生产,这个工人能够利用这些材料最终
一步步的将剪子做出来,这个来做事情的工人称之为:线程
。这个老板为了提高生产率想到3种办法:
   1.在这条生产线上多招些工人,一起来做剪子,这样效率是成倍增长,即单进程多线程方式
   2.老板发现这条生产线上的工人不是越多越好,因为一条生产线的资源以及材料毕竟有限,所以老
   板又花了些财力物力购置了另外一条生产线,然后再招些工人这样效率又再一步提高了,即多进
   程多线程方式
   3.老板发现现在已经有了很多条生产线,并且每条生产线上已经有很多工人了(即程序是多进程
   的,每个进程中又有多个线程为了再次提高效率,老板想了个损招,规定:如果某个员工在
  上班时临时没事或者再等待某些条件(比如等待另一个工人生产完某道工序之后，他才能再次工
  作),那么这个员工就利用这个时间去做其它的事情,那么也就是说:如果一个线程等待某些条
  件,可以充分利用这个时间去做其它事情,其实这就是:协程方式

简单总结
1.进程是资源分配的单位
2.线程是操作系统调度的单位
3.进程切换需要的资源很最大，效率很低
4.线程切换需要的资源一般,效率一般(当然了在不考虑GIL的情况下)
5.协程切换任务资源很小效率高
6.多进程、多线程根据cpu核数不一样可能是并行的,但是协程是在一个线程中所以是并发


# GIL无疑就是一把全局排他锁。毫无疑问全局锁的存在会对多线程的效率有不小影响。甚至就几乎等于Python是个单线程的程序。





