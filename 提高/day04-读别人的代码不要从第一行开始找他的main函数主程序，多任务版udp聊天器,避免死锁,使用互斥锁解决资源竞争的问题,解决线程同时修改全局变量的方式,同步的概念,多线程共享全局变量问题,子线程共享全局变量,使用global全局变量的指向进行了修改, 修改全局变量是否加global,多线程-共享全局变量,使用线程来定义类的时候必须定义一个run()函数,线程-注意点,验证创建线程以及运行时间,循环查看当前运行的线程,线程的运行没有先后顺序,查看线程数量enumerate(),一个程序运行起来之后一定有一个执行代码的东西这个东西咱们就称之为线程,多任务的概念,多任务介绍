多任务介绍
有很多的场景中的事情是同时进行的


eg: 没有多任务的练习

import time


def sing():
	"""唱歌 5秒钟"""
	for i in range(5):
		print("---正在唱：菊花茶---")
		time.sleep(1)


def dance():
	"""跳舞 5秒钟"""
	for i in range(5):
		print("---正在跳舞---")
		time.sleep(1)


def main():
	sing()
	dance()


if __name__ == "__main__":
	main()



eg:  多任务-线程-demo.py

import time
import threading


def sing():
	"""唱歌 5秒钟"""
	for i in range(5):
		print("---正在唱：菊花茶---")
		time.sleep(1)


def dance():
	"""跳舞 5秒钟"""
	for i in range(5):
		print("---正在跳舞---")
		time.sleep(1)


def main():
	t1 = threading.Thread(target=sing)      # target指定将来 这个线程去哪个函数执行代码
	t2 = threading.Thread(target=dance)

	t1.start()
	t2.start()


if __name__ == "__main__":
	main()




多任务的概念
什么叫“多任务”呢?简单地说,就是操作系统可以同时运行多个任务打个比方你一边在用浏览器上
网,一边在听MP3,一边在用Word赶作业,这就是多任务,至少同时有3个任务正在运行还有很多任务
悄悄地在后台同时运行着只是桌面上没有显示而已

现在,多核CPU已经非常普及了,但是即使过去的单核CPU,也可以执行多任务·由于CPU执行代码都
是顺序执行的,那么,单核CPU是怎么执行多任务的呢?

答案就是操作系统轮流让各个任务交替执行,任务1执行0.01秒,切换到任务2,任务2执行0.01秒,再切换
到任务3,执行0.01秒这样反复执行下去·表面上看,每个任务都是交替执行的,但是,由于CPU的执
行速度实在是太快了,我们感觉就像所有任务都在同时执行一样
真正的并行执行多任务只能在多核CPU上实现,但是,由于任务数量远远多于CPU的核心数量所以操
作系统也会自动把很多任务轮流调度到每个核心上执行。


"时间片轮转"--比如说每个软件都执行0.01秒，所以即使是单核CPU(理论上，在一个时刻只能运行一个程序)都能带个人多任务同时进行的假象

并行：真的多任务
并发：假的多任务


线程
python的thread 模块是比较底层的模块 ，python 的 threading的模块是对 thread做了一
些包装的,可以更加方便的被使用

1.使用 threading模块

单线程执行：
#coding=utf-8
import time
def saySorry()：
    print(亲爱的,我错了,我能吃饭了吗?”)
    time. sleep(1)

if  __name__ = "__main__":
    for i in range(5):
        saySorry()



多线程执行:
#coding=utf-8
import threading
import time
 
def saySorry()
    print(亲爱的·我错我能吃饭了吗?)
    time. sleep(1)
 
if  __name__ == "__main__":
    for i in range(5):
        t = threading.Thread( target=saySorry)       #Thread是类，后面target是创建对象，t就是被创建的实例对象
        t.start()  #启动线程·即让线程开始执行


说明：
1. 可以明显看出使用了多线程并发的操作，花费时间要短很多
2.当调用 start()时，才会真正的创建线程，并且开始执行


一个程序运行起来之后，一定有一个执行代码的东西，这个东西咱们就称之为线程(***放在标题中***)


读别人的代码不要从第一行开始，找他的main函数，主程序


(函数名 + 括号 -->表示调用函数
单函数名  --> 表示告知函数在哪里，比如多线程的  t = threading.Thread( target=saySorry)，saySorry这个函数名
就没有加(),在这里如果加了括号就会出错)



3.查看线程数量
 
#coding=ut f-8
import threading
from time import sleep,ctime
 
def sing():
    for i in range(3):
        print("正在唱歌...%d" % i )
        sleep(1)
 
def dance():
    for i in range(3):
        print("正在跳舞...%d" % i)
        sleep(1)
 
if __name__ ==  "__main__":
    print("---开始---:%s'  %ctime())
 
    t1 = threading.Thread(target=sing)
    t2 = threading.Thread( target=dance)
 
    t1. start()
    t2. start()
  
    while True:
        length = len(threading.enumerate())        # enumerate()这个函数返回的值是元组
        print'当前运行的线程数为: %d' % length)
        if length <= 1:
             break
 
             sleep(.5)



# 线程的运行没有先后顺序



eg: 让某些线程先执行.py

import threading
import time


def test1():
	for i in range(5):
		print("---test1---%d" % i)


def test2():
	for i in range(5):
		print("---test2---%d" % i)


def main():
	t1 = threading.Thread(target=test1)
	t2 = threading.Thread(target=test2)

	t1.start()

	time.sleep(1)
	print("---1---")

	t2.start()

	time.sleep(1)
	print("---2---")

	print(threading.enumerate())


if __name__ == "__main__":
	main()



eg: 循环查看当前运行的线程.py

import threading
import time


def test1():
	for i in range(5):
		print("---test1---%d" % i)
		time.sleep(1)

	# 如果创建Thread时执行的函数，运行结束那么意味着 这个子线程结束了。。。


def test2():
	for i in range(10):
		print("---test2---%d" % i)
		time.sleep(1)


def main():
	t1 = threading.Thread(target=test1)
	t2 = threading.Thread(target=test2)

	t1.start()
	t2.start()

	while True:
		print(threading.enumerate())   # 返回的是列表
		if len(threading.enumerate()) <= 1:
			break
		time.sleep(1)


if __name__ == "__main__":
	main()



eg: 验证创建线程以及运行时间.py

import threading
import time


def test1():
	for i in range(5):
		print("---test1---%d" % i)
		time.sleep(1)

	# 如果创建Thread时执行的函数，运行结束那么意味着 这个子线程结束了。。。


def main():
	# 在调用Threading之前先打印当前线程信息
	print(threading.enumerate())
	t1 = threading.Thread(target=test1)  # 调用thread单单创建了对象
	
	# 在调用Thread之后打印
	print(threading.enumerate())
	
	t1.start()
	
	# 在调用start之后打印
	print(threading.enumerate())

	
if __name__ == "__main__":
	main()

# 当调用Thread的时候，不会创建线程，当调用Thread创建出来的实例对象的 start方法
# 的时候，才会创建线程以及让这个线程开始运行



线程-注意点
线程执行代码的封装
通过上一小节能够看出,通过使用 threading 模块能完成多任务的程序开发,为了让每个线程的封装性更
完美,所以使用 threading模块时, 往往会定义一个新的子类 class, 只要继承 threading.Thread就可以
了,然后重写run()方法

示例如下:
#coding=utf-8
import threading
import time
 
class MyThread(threading.Thread)
    def run(self):
        for i in range(3):
            time.sleep(1)
            msg="I'm"+self.name+'@'+str(i) # name属性中保存的是当前线程的名字
            print(msg)
 
if __name__ == '__main__':
    t = MyThread ()
    t.start()


2.线程的执行顺序
#coding=utf-8
import threading
import time
 
class MyThread(threading.Thread):
    def run(self):                     # 使用线程来定义类的时候，必须定义一个run()函数(***放在标题中***)
        for i in range(3):
              time.sleep()
              msg ="I'm "+self. name+'@'+str(i)
              print(msg)
 

def test():
    for i in range(5):
        t = MyThread()
        t. start()
 

if  __name__ ==  '__main__':
    test()

执行结果:(运行的结果可能不一样,但是大体是一致的)
 I'm Thread-1 0
 I'm Thread-2 @0
 I'm Thread-5 @0
 I'm Thread-3 @0
 I'm Thread-4 @0
 I'm Thread-3@ 1
 I'm Thread-4 @1
 I'm Thread-5 1
 I'm Thread-1 1
 I'm Thread-2 1
 I'm Thread-4 @2
 I' m Thread--5@2



多线程-共享全局变量:
from threading import Thread
import time

g_num = 100
 
def work1():
    global g_num
    for i in range(3):
         g_num += 1
 
     print("----in work1,  g_num is &d---" % g_num)


def work2():
     global g_num
     print("---in work2, g_num is &d---" % g_num)
 
print("---线程创建之前 g_num is %d---" % g_num)

t1 = Thread(target=work1)
t1.start()

#延时一会,保证t1线程中的事情做完
time. sleep(1)

t2 = Thread(target=work2)
t2.start()



eg: 修改全局变量是否加global

num = 100
nums = [11, 22]

def test():
	global num

	num += 100


def test2():
	nums.append(33)

print(num)
print(nums)

test()
test2()

print(num)
print(nums)

# 在一个函数中 对全局变量进行修改的时候，到底是否需要使用global进行说明，要
# 看是否对 全局变量的指向进行了修改，如果修改了指向(加了等号，产生了新的变化，生成了新的变量)，即让全局变量指向了一个
# 新的地方，那么必须使用global,如果仅仅是修改了指向的空间中的数据， 此时不用必须
# 使用global



eg: 线程共享全局变量.py

import threading
import time

# 定义一个全局变量
g_num = 100


def test1():
	global g_num
	g_num += 1
	print("----in test1 g_num=%d---" % g_num)


def test2():
	print("----in test2 g_num=%d---" % g_num)


def main():
	t1 = threading.Thread(target=test1)
	t2 = threading.Thread(target=test2)

	t1.start()
	time.sleep(1)   # 这个操作可以保证先执行t1

	t2.start()
	time.sleep(1)

	print("----in main Thread g_num = %d---" % g_num)


if __name__ == "__main__":
	main()


# 子线程共享全局变量(***这句话放到标题中)



列表当做实参传递到线程中：
from threading import Thread
import time
 
def work1(nums)：
    nums.append(44)
    print("----in work1---", nums)
 
def work2(nums):
    #延时一会,保证t1线程中的事情做完
     time. sleep(1)
     print("----in work2--", nums)

g_nums=[11,22,33]
 
t1 = Thread(target=work1, args=(g_nums,) )
t1.start()
 
t2= Thread(target=work2, args=(g_nums,) )
t2.start()

运行结果:
---in work1---[11,22,33,44]
---in work2---[11,22,33,44]

***总结***:
·在一个进程内的所有线程共享全局变量,方便在多个线程间共享数据
.缺点就是,线程是对全局变量随意修改可能造成多线程之间对全局变量的混乱(即线程非安全)



eg: 多线程共享全局变量.py

import threading
import time


def test1(temp):    # 此处的temp是随意命名的,为的是下方传递g_nums
	temp.append(33)
	print("----in test1 temp=%s---" % str(temp))


def test2(temp):
	print("----in test2 temp=%s---" % str(temp))


g_nums = [11, 22]


def main():
	# target指定将来 这个线程去哪个函数执行代码
	# args指定将来调用 函数的时候 传递什么数据过去
	t1 = threading.Thread(target=test1, args=(g_nums,))
	t2 = threading.Thread(target=test2, args=(g_nums,))

	t1.start()
	time.sleep(1)   # 这个操作可以保证先执行完t1

	t2.start()
	time.sleep(1)

	print("----in main Thread g_nums = %s---" % str(g_nums))


if __name__ == "__main__":
	main()


# 子线程共享全局变量




多线程共享全局变量问题:
多线程开发可能遇到的问题
假设两个线程 t1和t2 都要对全局变量g_num(默认是0)进行加1运算，t1和t2都各对g_num加10次，g_num的
最终的结果应该为20。

但是由于是多线程同时操作,有可能出现下面情况:
1.在g_num=0时,t1取得g_num=0，此时系统把t1调度为"sleeping"状态,把t2转换为"running"状态,t2
也获得g_num=0
2.然后t2对得到的值进行加1并赋给g_num,使得g_num=1
3.然后系统又把t2调度为"sleeping",把t1转为"running"。线程t1又把它之前得到的0加1后赋值给
 g_num.
4.这样导致虽然t1和t2都对g_num加1,但结果仍然是g_num=1

测试1:
import threading
import time
 
g_num =0
 
def work1(num):
    global g_num
    for i in range(num):
        g_num += 1
    print("---in work1,g_num is %d---" % g_num)
 
def work2(num):
    global g_num
    for i in range(num):
        g_num += 1
    print("---in work1, g_num is %d---" % g_num)



eg:  共享全局变量的问题-资源竞争

import threading
import time

# 定义一个全局变量
g_num = 0


def test1(num):
	global g_num
	for i in range(num):
		g_num += 1
	print("----in test1 g_num=%d---" % g_num)


def test2(num):
	global g_num
	for i in range(num):
		g_num += 1
	print("----in test2 g_num=%d---" % g_num)


def main():
	t1 = threading.Thread(target=test1, args=(1000000,))
	t2 = threading.Thread(target=test2, args=(1000000,))

	t1.start()
	t2.start()

	# 等待上面的2个线程执行完毕
	time.sleep(2)

	print("----in main Thread g_num = %d---" % g_num)


if __name__ == "__main__":
	main()





同步的概念：
同步就是协同步调,按预定的先后次序进行运行·如你说完我再说
“同”字从字面上容易理解为一起动作
其实不是,“同"字应是指协同协助互相配合。
如进程/线程 同步可理解为进程或线程A和B一块配合,A执行到一定程度时要依靠B的某个结果,于是
停下来,示意B运行，B执行,再将结果给A，A再继续操作

解决线程同时修改全局变量的方式
对于上一小节提出的那个计算错误的题,可以通过线程同步来进行解决
思路,如下:
1.系统调用t1,然后获取到g_num的值为0,此时上一把锁,即不允许其他线程操作g_num
2.t1对g_num的值进行+1
3.t1解锁,此时g_num的值为1,其他的线程就可以使用g_num了,而且是g_num的值不是0而是1
4.同理其他线程在对g_num进行修改时都要先上锁,处理完后再解锁,在上锁的整个过程中不允许其
他线程访问,就保证了数据的正确性



互斥锁
当多个线程几乎同时修改某一个共享数据的时候,需要进行同步控制
线程同步能够保证多个线程安全访问竞争资源最简单的同步机制是引入互斥锁
互斥锁为资源引入一个状态:锁定/非锁定
某个线程要更改共享数据时先将其锁定此时资源的状态为“锁定”,其他线程不能更改;直到该线程释
放资源,将资源的状态变成“非锁定”,其他的线程才能再次锁定该资源互斥锁保证了每次只有一个线程
进行写入操作,从而保证了多线程情况下数据的正确性


threading模块中定义了Lock类，可以方便的处理锁定：
#创建锁
mutex = threading.lock()

#锁定
mutex.acquire()

#释放
mutex.release()

注意:
·如果这个锁之前是没有上锁的,那么acquire不会堵塞
·如果在调用 acquire对这个锁上锁之前它已经被其他线程上了锁,那么此时 acquire会堵塞,直到这个
锁被解锁为止

使用互斥锁完成2个线程对同一个全局变量各加100万次的操作：
import threading
import time

g_num =0

def test1(num):
    global g_num
    for i in range(num):
        mutex.acquire()       #上锁
        g_num += 1
        mutex.release()#解锁
 
   print("---test1---g_num=%d" % g_num)


def test2(num):
    global g_num
    for i in range(num):
        mutex. acquire()    #上锁
        g_num +=1
        mutex release()      #解锁
 
    print("---test2---g_num=%d" % g_num)

# 创建一个互斥锁
# 默认是未上锁的状态
mutex = threading.Lock()

if __name__ == "__main__":
   t1 = threading.Thread(target=test1, args=(1000000,))
   t2 = threading.Thread(target=test2, args=(1000000,))
   t1.start()
   t2.start()



eg: 使用互斥锁解决资源竞争的问题-1:(有两种方法，这是第一种)

import threading
import time

# 定义一个全局变量
g_num = 0


def test1(num):
	global g_num
	
	# 上锁，如果之前没有被上锁， 那么此时上锁成功
	# 如果上锁之前 已经被上锁了，那么此时会堵塞在这里，直到这个锁被解开位置
	mutex.acquire()

	for i in range(num):
		g_num += 1

	# 解锁
	mutex.release()

	print("----in test1 g_num=%d---" % g_num)


def test2(num):
	global g_num

	mutex.acquire()  # 上锁

	for i in range(num):
		g_num += 1

	mutex.release()  # 解锁 
	print("----in test2 g_num=%d---" % g_num)


#创建一个互斥锁，默认是没有上锁的
mutex = threading.Lock()


def main():
	t1 = threading.Thread(target=test1, args=(1000000,))
	t2 = threading.Thread(target=test2, args=(1000000,))

	t1.start()
	t2.start()

	# 等待上面的2个线程执行完毕
	time.sleep(2)

	print("----in main Thread g_num = %d---" % g_num)


if __name__ == "__main__":
	main()




eg: 使用互斥锁解决资源竞争的问题-2：

import threading
import time

# 定义一个全局变量
g_num = 0


def test1(num):
	global g_num
	
	for i in range(num):
		mutex.acquire()  # 上锁
		g_num += 1
		mutex.release()  # 解锁

	print("----in test1 g_num=%d---" % g_num)


def test2(num):
	global g_num

	for i in range(num):
		mutex.acquire()  # 上锁
		g_num += 1
		mutex.release()  # 解锁 

	print("----in test2 g_num=%d---" % g_num)


#创建一个互斥锁，默认是没有上锁的
mutex = threading.Lock()


def main():
	t1 = threading.Thread(target=test1, args=(1000000,))
	t2 = threading.Thread(target=test2, args=(1000000,))

	t1.start()
	t2.start()

	# 等待上面的2个线程执行完毕
	time.sleep(2)

	print("----in main Thread g_num = %d---" % g_num)


if __name__ == "__main__":
	main()




1.死锁
在线程间共享多个资源的时候,如果两个线程分别占有一部分资源并且同时等待对方的资源就会造成死
锁
尽管死锁很少发生,但一旦发生就会造成应用的停止响应，下面看一个死锁的例子
#coding=utf-8
import threading
import time

class MyThread1( threading.Thread):
     def run(self):
     #对 mutexA上锁
     mutexA. acquire()

    # mutexA上锁后延时1秒·等待另外那个线程把 mutexB上锁
     print(self. name+'---do1---up----)
     time. sleep(1)


   #此时会堵塞,因为这个mutexB已经被另外的线程抢先上锁了
    mutexB.acquire()
    print(self.name+'----do1---down----')
    mutexB. release()

   #对mutexA解锁
    mutexA. release()

class MyThread2(threading.Thread):
    def run(self):
       #对 mutexB上锁
        mutexB. acquire()

       # mutexB上锁后，延时1秒·等待另外那个线程把 mutexA上锁
        print(self. name+'---do2--up---')
        time.sleep(1)

       #此时会堵塞,因为这个mutexA已经被另外的线程抢先上锁了
        mutexA.acquire()
        print(self. name+'-do2---down
        mutexA. release()

       # 对mutexB解锁
        mutexB. release()


mutexA = threading.Lock()
mutexB = threading.Lock()
 
if __name__ ==  "__main__":
    t1 = MyThread1()
    t2 = MyThread2()
    t1. start()
    t2. start()


# 运行后会进入到死锁状态



2. 避免死锁
。程序设计时要尽量避免（银行家算法）
。添加超时时间等



附录-银行家算法
[背景知识]
一个银行家如何将一定数目的资金安全地借给若干个客户,使这些客户既能借到钱完成要干的事,同时银
行家又能收回全部资金而不至于破产,这就是银行家问题这个问题同操作系统中资源分配问题十分相
似:银行家就像一个操作系统,客户就像运行的进程,银行家的资金就是系统的资源

[问题的描述]
一个银行家拥有一定数量的资金,有若干个客户要贷款每个客户须在一开始就声明他所需贷款的总额
若该客户贷款总额不超过银行家的资金总数,银行家可以接收客户的要求·客户贷款是以每次一个资金单
位(如1万RMB等)的方式进行的,客户在借满所需的全部单位款额之前可能会等待,但银行家须保证这
种等待是有限的,可完成的。

例如:有三个客户C1,C2,C3,向银行家借款该银行家的资金总额为10个资金单位,其中C1客户要借
9各资金单位,C2客户要借3个资金单位,C3客户要借8个资金单位,总计20个资金单位。某一时刻的状态




eg: 多任务版udp聊天器

import socket
import threading


def recv_msg(udp_socket):
	"""接收数据并显示"""
	# 接收数据
	while True:
		recv_data = udp_socket.recvfrom(1024)
		print(recv_data[0].decode("gbk"))     # 对方发送过来的数据，包含信息和对方的地址，所以返回的是一个列表，
                                          # 因此通过索引来取值，再进行解编码


def send_msg(udp_socket, dest_ip, dest_port):
	"""发送数据"""
	# 发送数据
	while True:
		send_data = input("输入要发送的数据:")
		udp_socket.sendto(send_data.encode("gbk"), (dest_ip, dest_port))


def main():
	"""完成udp聊天器的整体控制"""

	# 1.创建套接字
	udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

	# 2. 绑定本地信息
	udp_socket.bind(("", 7890))    # 本地信息，返回的是元组的值,因此这里是双括号

	# 3. 获取对方的ip
	dest_ip = input("请输入对方的ip:")
	dest_port = int(input("请输入对方的port:"))

	# 4. 创建两个线程，去执行相应的功能
	t_recv = threading.Thread(target=recv_msg, args=(udp_socket,))    #args是元组，所以后面跟的值是元组
	t_send = threading.Thread(target=send_msg, args=(udp_socket, dest_ip, dest_port))

	t_recv.start()
	t_send.start()


if __name__ == "__main__":
	main()









