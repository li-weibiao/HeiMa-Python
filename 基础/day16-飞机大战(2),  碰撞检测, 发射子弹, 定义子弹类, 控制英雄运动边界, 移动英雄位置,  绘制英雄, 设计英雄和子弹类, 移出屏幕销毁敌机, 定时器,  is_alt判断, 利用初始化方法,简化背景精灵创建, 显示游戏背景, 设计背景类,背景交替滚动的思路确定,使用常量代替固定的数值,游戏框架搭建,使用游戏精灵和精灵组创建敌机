eg:  plane_sprites
import pygame


class GameSprite(pygame.sprite.Sprite):
    """飞机大战游戏精灵"""

    def __init__(self, image_game, speed=1):
        # 调用父类的初始化方法
        super().__init__()

        # 定义对象的属性
        self.image = pygame.image.load(image_game)
        self.rect = self.image.get_rect()
        self.speed = speed

    def update(self):
        # 在屏幕的垂直方向上移动
        self.rect.y += self.speed

4.3使用游戏精灵和精灵组创建敌机
需求
·使用刚刚派生的游戏精灵和精灵组创建机并且实现敌机动画
步骤
1.使用from导入 plane_sprites模块
from导入的模块可以直接使用
import导入的模块需要通过 模块名. 来使用
2.在游戏初始化创建精灵对象和精灵组对象
3.在游戏循环中让精灵组分别调用 update() 和 draw(screen)方法

职责
·精灵
封装 image图像、位置rect 和速度 speed
提供 update()方法,根据游戏需求,更新位置rect
·精灵组
。包含多个精灵对象
。update方法,让精灵组中的所有精灵调用 update方法更新位置
。draw(screen)方法,在 screen上绘制精灵组中的所有精灵

eg:

import pygame
from plane_sprites import *

# 游戏初始化
pygame.init()

# 创建游戏的窗口
screen = pygame.display.set_mode((480, 700))  # 有返回值，所以用变量来接受

# 绘制背景图像
bg = pygame.image.load("./images/background.png")
screen.blit(bg, (0, 0))
# pygame.display.update()

# 绘制英雄的飞机
hero = pygame.image.load("./images/me1.png")
screen.blit(hero, (150, 300))

# 可以在所有绘制工作完成之后，统一调用update方法
pygame.display.update()

# 创建时钟对象
clock = pygame.time.Clock()

# 1. 定义rect记录飞机的初始位置
hero_rect = pygame.Rect(150, 300, 102, 126)


# 创建敌人飞机的精灵
enemy = GameSprite("./images/enemy1.png")
enemy1 = GameSprite("./images/enemy1.png", 2)

# 创建敌人飞机的精灵组
enemy_group = pygame.sprite.Group(enemy, enemy1)

# 游戏循环 -> 意味着游戏的正式开始

while True:

    # 可以指定循环体内部的代码执行的频率
    clock.tick(60)

    #  监听事件
    for event in pygame.event.get():

        # 判断事件类型是否是退出事件
        if event.type == pygame.QUIT:
            print("游戏退出...")

            #  quit 卸载所有的模块
            pygame.quit()
            # exit() 退出当前正在执行的程序
            exit()

    # 2. 修改飞机的位置
    hero_rect.y -= 1

    # 判断飞机的位置
    if hero_rect.y <= 0:
        hero_rect.y = 700

    # 3. 调用blit方法绘制图像
    screen.blit(bg, (0, 0)) # 首先更新背景图像，用来遮挡飞机移动后留下来的残影
    screen.blit(hero, hero_rect)

    # 让精灵组调用两个方法
    # update — 让组织中的所有精灵更新位置
    enemy_group.update()

    # draw — 在screen上绘制所有精灵
    enemy_group.draw(screen)

    # 4. 调用update方法更新显示
    pygame.display.update()

pygame.quit()



2. 游戏框架搭建
目标--使用面相对象设计飞机大战游戏类
目标
明确主程序职责
实现主程序类
·准备游戏精灵组
01.明确主程序职责
·回顾快速入门案例一个游戏主程序的职责可以分为两个部分:
。游戏初始化
。游戏循环
·根据明确的职责,设计 PlaneGame类如下:



提示根据职责封装私有方法,可以避免某一个方法的代码写得太过冗长
如果某一个方法编写的太长,既不好阅读,也不好维护!
·游戏初始化--__init__()会调用以下方法:

方法                                         职责
__event_handler(self)           事件监听
__check_ collide(self)            碰撞检测子弹销毁敌机、敌机撞毁英雄
__update_sprites(self)           精灵组更新和绘制
__game_over()                      游戏结束

02.实现飞机大战主游戏类
2.1明确文件职责

plane_main
1.封装主游戏类
2.创建游戏对象
3.启动游戏

plane_ sprites
封装游戏中所有需要使用的精灵子类
提供游戏的相关工具

代码实现
新建planemain.py文件,并且设置为可执行
编写基础代码


使用常量代替固定的数值
·常量-不变化的量
·变量-可以变化的量

应用场景
·在开发时,可能会需要使用固定的数值,例如屏幕的高度是700
·这个时候,建议不要直接使用固定数值,而应该使用常量
·在开发时,为了保证代码的可维护性,尽量不要使用魔法数字

常量的定义
·定义常量和定义变量的语法完全一样,都是使用赋值语句
·常量的命名应该所有字母都使用大写,单词与单词之间使用下划线连接

常量的好处
·阅读代码时,通过常量名见名之意,不需要猜测数字的含义
·如果需要调整值,只需要修改常量定义就可以实现统一修改

提示: Python中并没有真正意义的常量,只是通过命名的约定一所有字母都是大写的
就是常量,开发时不要轻易的修改!

代码调整
·在 plane_sprites.py中增加常量定义



游戏背景
目标
。背景交替滚动的思路确定
。显示游戏背景

01.背景交替滚动的思路确定
运行备课代码,观察背景图像的显示效果:
·游戏启动后,背景图像会连续不断地向下方移动
·在视觉上产生英雄的飞机不断向上方飞行的错觉--在很多跑酷类游戏中常用的套路
。游戏的背景不断变化
。游戏的主角位置保持不变

1.1实现思路分析
解决办法
1.创建两张背景图像精灵
·第1张完全和屏幕重合
·第2张在屏幕的正上方
2.两张图像一起向下方运动
self.rect.y += self.speed
3.当任意背景精灵的 rect.y >= 屏幕的高度说明已经移动到屏幕下方
4.将移动到屏幕下方的这张图像 设置到 屏幕的正上方
 rect.y = -rect.height


1.2 设计背景类

初始化方法
。直接指定背景图片
。is_alt 判断是否是另一张图像
 False表示第一张图像,需要与屏幕重合
 true表示另一张图像,在屏幕的正上方

update()方法
。判断是否移动出屏幕,如果是,将图像设置到屏幕的正上方,从而实现交替滚动

继承如果父类提供的方法,不能满足子类的需求:
。派生一个子类
。在子类中针对特有的需求,重写父类方法,并且进行扩展


02.显示游戏背景
2.1 背景精灵的基本实现
在 plane_sprites 新建 Background 继承自 GameSprite

class Background(GameSprite):
    """游戏背景精灵"""
    def update(self):
        #1.调用父类的方法实现
        super(). update()
       
        #2.判断是否移出屏幕,如果移出屏幕,将图像设置到屏幕的上方
        if self. rect.y >= SCREEN_RECT.height:
            self.rect.y = -self. rect. height

2.2在main.py中显示背景精灵
1.在 __create_ sprites 方法中创建精灵和精灵组
2.在 __update_sprites 方法中,让精灵组调用 update()和draw()方法

__create_sprites方法:

def __create_sprites(self):

        # 创建背景精灵和精灵组
        bg1 = Background("./images/background.png")
        bg2 = Background("./images/background.png")
        bg2.rect.y = -bg2.rect.height
        
        self.back_group = pygame.sprite.Group(bg1, bg2)


__update_sprites方法：

def __update_sprites(self):

        self.back_group.update()
        self.back_group.draw(self.screen)



2.3利用初始化方法,简化背景精灵创建
思考上一小结完成的代码存在什么样的问题?能否简化?
·在主程序中,创建的两个背景精灵,传入了相同的图像文件路径
·创建第二个背景精灵时,在主程序中设置背景精灵的图像位置
思考--精灵初始位置的设置,应该由主程序负责?还是由精灵自己负责?
答案由精灵自己负责
·根据面向对象设计原则,应该将对象的职责,封装到类的代码内部
尽量简化程序调用一方的代码调用

初始化方法
。直接指定背景图片
。is_alt判断是否是另一张图像
 False表示第一张图像,需要与屏幕重合
 True表示另一张图像,在屏幕的正上方
在 plane_sprites.py 中实现 Background 的初始化方法



敌机出场
目标
使用 定时器 添加敌机
·设计Enemy类

01.使用定时器添加敌机
运行备课代码,观察敌机的出现规律:
1.游戏启动后,每隔1秒会出现一架敌机
2.每架敌机向屏幕下方飞行,飞行速度各不相同
3.每架敌机出现的水平位置也不尽相同
4.当敌机从屏幕下方飞出,不会再飞回到屏幕中

11定时器
·在 pygame 中可以使用 pygame.time.set_timer()来添加定时器
·所谓定时器,就是每隔一段时间,去执行一些动作
 set_timer(eventid, milliseconds)->None
 
set_timer可以创建一个事件
·可以在游戏循环的事件监听方法中捕获到该事件
·第1个参数事件代号需要基于常量 pygame. USEREVENT来指定
USEREVENT是一个整数,再增加的事件可以使用 USEREVENT+1指定,依次类推...
·第2个参数是事件触发间隔的毫秒值

定时器事件的监听
·通过pygame event.get()可以获取当前时刻所有的事件列表
.遍历列表 并且判断 event.type 是否等于 eventid ,如果相等，表示定时器事件发生


1.2定义并监听创建敌机的定时器事件
 pygame的定时器使用套路非常固定:
1.定义定时器常量--eventid
2.在初始化方法中,调用 set_timer方法设置定时器事件
3.在游戏循环中,监听定时器事件

1定义事件
·在 planesprites.py的顶部定义事件常量

#敌机出现事件
CREATE_ENEMY_EVENT = pygame.USEREVENT


02.设计 Enemy类
1.游戏启动后,每隔1秒会出现一架敌机
2.每架敌机向屏幕下方飞行,飞行速度各不相同
3.每架敌机出现的水平位置也不尽相同
4.当敌机从屏幕下方飞出,不会再飞回到屏幕中

初始化方法
指定敌机图片
随机敌机的初始位置和初始速度

重写update方法
判断是否飞出屏幕,如果是,从精灵组删除



2.2创建敌机
演练步骤
1.在 __create_sprites ,添加敌机精灵组
·敌机是定时被创建的,因此在初始化方法中,不需要创建敌机
2.在 __event_handler ,创建敌机,并且添加到精灵组
·调用精灵组的 add 方法可以向精灵组添加精灵
3.在 __update_ sprites ,让敌机精灵组调用 update 和 draw方法


2.3随机敌机位置和速度
1)导入模块
在导入模块时,建议按照以下顺序导入
1.官方标准模块导入
2.第三方模块导入
3.应用程序模块导入

·修改 plane_sprites.py 增加 random 的导入
 import random


2）随机位置
使用 pygame,rect 提供的 bottom 属性,在指定敌机初始位置时,会比较方便
 bottom = y + height
 y = bottom - height


2.4移出屏幕销毁敌机
·敌机移出屏幕之后,如果没有撞到英雄,敌机的历史使命已经终结
需要从敌机组删除,否则会造成内存浪费


检测敌机被销毁
__del__ 内置方法会在对象被销毁前调用,在开发中,可以用于判断对象是否被销毁
 
def __del_(self):
    print("敌机挂了  %s"   %  self.rect)


·判断敌机是否飞出屏幕,如果是,调用 kill() 方法从所有组中删除
def update(self):
    super(). update(args)
    #判断敌机是否移出屏幕
    if self.rect.y > SCREEN_RECT.height:
        #将精灵从所有组中删除
        self.kill()


英雄登场
目标
设计英雄和子弹类
·使用 pygame.key.get_pressed() 移动英雄
·发射子弹

01.设计英雄和子弹类
英雄需求
1.游戏启动后,英雄出现在屏幕的水平中间位置,距离屏幕底部120像素
2.英雄每隔0.5秒发射一次子弹,每次连发三枚子弹
3.英雄默认不会移动,需要通过左/右方向键,控制英雄在水平方向移动


子弹需求
1.子弹从英雄的正上方发射沿直线 向上方飞行
2.飞出屏幕后，需要从精灵组中删除


Hero--英雄
初始化方法
。指定英雄图片
。初始速度 = 0--英雄默认静止不动
。定义 bullets子弹精灵组保存子弹精灵

·重写update0方法
英雄需要水平移动
并且需要保证不能移出屏幕

●
增加 bullets属性,记录所有子弹精灵
增加fire方法,用于发射子弹


02 创建英雄
2.1 准备英雄类
。在 plane_sprites 新建 Hero 类
。重写 初始化方法，直接指定图片名称，并且将初始速度设置为0
。设置英雄的初始位置

。centerx = x + 0.5  * width  
。centery = y + 0.5  * height
。 bottom = y + height



2.2绘制英雄
1.在 __create_sprites,添加英雄精灵和英雄精灵组
·后续要针对英雄做碰撞检测以及发射子弹
.所以英雄需要单独定义成属性
2.在 __update_sprites,让英雄精灵组调用 update 和 draw方法
代码实现
·修改 __create_sprites方法如下



03.移动英雄位置
在 pygame中针对键盘按键的捕获,有两种方式
·第一种方式判断 event.type == pygame.KEYDOWN

第二种方式
1.首先使用 pygame.key.get_ pressed()返回所有按键元组
2.通过键盘常量,判断元组中某一个键是否被按下如果被按下,对应数值为1

提问这两种方式之间有什么区别呢?
·第一种方式
 elif event.type == pygame.KEYDOWN and event.key =pygame.K_RIGHT:
 print("向右移动")
·第二种方式
#返回所有按键的元组,如果某个键被按下,对应的值会是1
keys_ pressed = pygame.key.get_pressed()
#判断是否按下了方向键
if keys_pressed[pygame. K_RIGHT]:
    print("向右移动)


结论：
第一种方式 event.type 用户必须要抬起按键才算第一次按键事件，操作灵活性会大打折扣
第二种方式 用户可以按住方向键不放，就能够实现持续向某一个方向移动，操作灵活性更好



3.1移动英雄位置
演练步骤
1.在Hero类中重写 update方法
用速度 speed和英雄 rect.x 进行叠加
不需要调用父类方法--父类方法只是实现了单纯的垂直运动
2.在 __event_handler 方法中根据左右方向键设置英雄的速度
·向右=>speed=2
·向左=>speed=-2
其他=>speed=0
代码演练
·在Hero类,重写 update()方法,根据速度水平移动英雄的飞机



3.2 控制英雄运动边界
在 Hero 类的 update() 方法判断 英雄 是否超出 屏幕边界

right = x + width 利用 right 属性可以非常容易的针对右侧设置精灵位置



04.发射子弹
需求回顾英雄需求
1.游戏启动后,英雄出现在屏幕的水平中间位置,距离屏幕底部120像素
2.英雄每隔0.5秒发射一次子弹,每次连发三枚子弹
3.英雄默认不会移动,需要通过左/右方向键,控制英雄在水平方向移动
4.1添加发射子弹事件
 pygame的定时器使用套路非常固定:
1.定义定时器常量--eventid
2.在初始化方法中,调用set_timer方法设置定时器事件
3.在游戏循环中,监听定时器事件
代码实现
·在Hero中定义fire方法
def fire(self):
    print("发射子弹...")



4.2定义子弹类
需求回顾--子弹需求
1.子弹从英雄的正上方发射沿直线向上方飞行
2.飞出屏幕后,需要从精灵组中删除
 
Bullet---子弹
·初始化方法
指定子弹图片
初始速度=2 --子弹需要向上方飞行
·重写 update方法
。判断是否飞出屏幕,如果是,从精灵组删除
定义子弹类
·在 plane_sprites新建 Bullet 继承自 GameSprite
·重写初始化方法,直接指定图片名称,并且设置初始速度
·重写update()方法,判断子弹飞出屏幕从精灵组删除



4.3发射子弹
演练步骤
1.在Hero的初始化方法中创建子弹精灵组属性
2.修改 plane_main.py的 __update_sprites方法,让子弹精灵组调用 update和draw方法
3.实现fire()方法
·创建子弹精灵
设置初始位置--在英雄的正上方
·将子弹添加到精灵组

代码实现
初始化方法
#创建子弹组
self.bullets = pygame.sprite.Group()


一次发射三枚子弹：
修改 fire() 方法，一次发射三枚子弹


碰撞检测
目标
了解碰撞检测方法
碰撞实现

01.了解碰撞检测方法
 pygame提供了两个非常方便的方法可以实现碰撞检测:
 pygame.sprite.groupcollide()
两个精灵组中所有的精灵的碰撞检测
 groupcollide(group1, group2, dokill1, dokill2, collided = None)->Sprite_dict

·如果将dokill设置为True,则发生碰撞的精灵将被自动移除
 collided参数是用于计算碰撞的回调函数
。如果没有指定,则每个精灵必须有一个rect属性

 pygame.sprite.spritecollide()
·判断某个精灵和指定精灵组中的精灵的碰撞
如果将dokill设置为True,则指定精灵组中发生碰撞的精灵将被自动移除
 collided参数是用于计算碰撞的回调函数
如果没有指定,则每个精灵必须有一个rect属性
·返回精灵组中跟精灵发生碰撞的精灵列表















