1.判断的定义：
条件满足，做一件事，条件不满足，做另外一件事

2.if判断，语句块会有缩进，四个空格
if语句以及缩进部分是一个完整的代码块

if,else都要顶格写

3.逻辑运算
在程序开发中,通常在判断条件时,会需要同时判断多个条件
只有多个条件都满足,才能够执行后续代码,这个时候需要使用到逻辑运算符
逻辑运算符可以把多个条件按照逻辑进行连接,变成更复杂的条件
 Python中的逻辑运算符包括:与and/或or/非not三种

开发中，通常希望某个条件不满足时，执行一些代码，可以使用not
另外，如果需要拼接复杂的逻辑计算条件，同样也有可能使用到not

（不管是if还是while都会在条件为True时才执行）

需要判断多个条件时，则需要用elif

可以将if,elif.else各自缩进的代码，看成一个完整的代码块

5.代码一小步一小步的编写，千万不要试着一次性写完，可以根据需求一步一步来编写

6.if的嵌套

7.格式化输出，%d表示整数

8.随机数的处理
·在 Python中,要使用随机数,首先需要导入随机数的模块——“工具包

 import random

·导入模块后,可以直接在模块名称后面敲一个 . 然后按Tab键,会提示该模块中包含的所有函数
 random. randint(a,b),返回[a,b]之间的整数,包含a和b
例如:
 random randint(12,20)#生成的随机数n:12<=n<=20
,,
 random. randint(20,20)#结果永远是20
 random randint(20,10)#该语句是错误的,下限必须小于上限

(eg:猜拳
import random      #注意，在导入工具包的时候，因该将导入的语句放在文件的顶部
import time        #这样可以方便下方的代码，在任何需要的时候，使用工具包中的工具

limit = 0

def guess_cai():
    print('请选择您的出拳 石头（1）剪刀（2）布（3）')
    print('请输入1,2,3')

    player = int(input())

    computer = random.randint(1,3)

    if player == computer:
        print('平局')
    elif player == 2 and computer == 3:
        print('you win!')
    elif player == 2 and computer == 1:
        print('you lose!')
    elif player == 3 and computer == 1:
        print('you win!')
    elif player == 3 and computer == 2:
        print('you lose!')
    elif player == 1 and computer == 2:
        print('you win!')
    elif player == 1 and computer == 3:
        print('you lose!')


    if player == 1:
        player = '石头'
    elif player == 2:
        player = '剪刀'
    else:
        player = '布'

    if computer == 1:
        computer = '石头'
    elif computer == 2:
        computer = '剪刀'
    else:
        computer = '布'


    print('您的出拳是%s，电脑出拳是%s' % (player,computer))    #格式化输出

while limit < 3:
    guess_cai()
    limit = limit + 1
    print()
    time.sleep(1)

#其他方法，先判断出玩家获胜的情况
#if (（ and )
#       or( and )      #多增加四个空格，有利于一目了然,逻辑换行
#       or( and )):
#                      #增加空行，有利于阅读
#   print('you win')
#elif plyer == computer:
#   print('平局')
#else:
#   print('you lose')
)




