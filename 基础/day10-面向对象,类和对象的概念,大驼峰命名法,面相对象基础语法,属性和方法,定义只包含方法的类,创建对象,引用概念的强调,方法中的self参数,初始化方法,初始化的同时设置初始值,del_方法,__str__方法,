1.面向对象（OOP）基本概念

面向对象(OOP)基本概念
面向对象编程--Object0 Oriented Programming简写OOP

目标
·了解面向对象基本概念
01.面向对象基本概念
·我们之前学习的编程方式就是面向过程的
·面相过程和面相对象,是两种不同的编程方式
·对比面向过程的特点,可以更好地了解什么是面向对象

1.1过程和函数(科普)
过程是早期的一个编程概念
·过程类似于函数,只能执行,但是没有返回值
函数不仅能执行,还可以返回结果
1.2面相过程和面相对象基本概念
1)面相过程-怎么做?
1.把完成某一个需求的所有步骤从头到尾逐步实现
2.根据开发需求,将某些功能独立的代码封装成一个又一个函数
3.最后完成的代码,就是顺序地调用不同的函数

特点：
1.注重步骤与过程，不注重职责分工
2.如果需求复杂，代码会变得很复杂
3.开发复杂项目。没有固定的套路，开发难度很大！

2)面向对象一谁来做?
相比较函数,面向对象是更大的封装,根据职责在一个对象中封装多个方法
1.在完成某一个需求前,首先确定职责--要做的事情(方法)
2.根据职责确定不同的对象,在对象内部封装不同的方法(多个)
3.最后完成的代码,就是顺序地让不同的对象调用不同的方法
特点
1.注重对象和职责,不同的对象承担不同的职责
2.更加适合应对复杂的需求变化,是专门应对复杂项目开发,提供的固定套路
3.需要在面向过程基础上,再学习一些面向对象的语法


01.类和对象的概念
类和对象是面向对象编程的两个核心概念
1.1类
·类是对一群具有相同特征或者行为的事物的一个统称,是抽象的,不能直接使用
。特征被称为属性
。行为被称为方法
·类就相当于制造飞机时的图纸,是一个模板,是负责创建对象的


1.2对象
·对象是由类创建出来的一个具体存在,可以直接使用
·由哪一个类创建出来的对象,就拥有在哪一个类中定义的
属性
。方法
·对象就相当于用图纸制造的飞机
在程序开发中,应该先有类,再有对象

02。类和对象的关系
·类是模板,对象是根据类这个模板创建出来的,应该先有类,再有对象
·类只有一个,而对象可以有很多个
。不同的对象之间属性可能会各不相同
·类中定义了什么属性和方法,对象中就有什么属性和方法,不可能多,也不可能少

03.类的设计
在使用面向对象开发前，因该首先分析需求，确定一下，程序中需要包含哪些类！
在程序开发中，要设计一个类，通常需要满足一下三个要素：
1.类名 这类事物的名字，满足大驼峰命名法
2.属性 这类失误具有设么样的特征
3.方法 这类事物具有什么样的行为

大驼峰命名法：
1.每个单词的首字母大写
2.单词与单词之间没有下划线

3.1类名的确定
名词提炼法分析整个业务流程,出现的名词,通常就是找到的类
3.2属性和方法的确定
·对对象的特征描述,通常可以定义成属性
·对象具有的行为(动词),通常可以定义成方法
提示:需求中没有涉及的属性或者方法在设计类时,不需要考虑

2.面相对象基础语法
目标：
  dir内置函数
  定义简单的类(只包含方法)
  方法中的self参数
  ·初始化方法
  内置方法和属性

01.dir内置函数(知道)
。在Python中对象几乎是无所不在的，我们之前学习的变量、数据、函数都是对象

在 Python中可以使用以下两个方法验证:
1.在标识符/数据 后输入一个,然后按下TAB键, iPython会提示该对象能够调用的方法列表
2.使用内置函数dir传入标识符/数据,可以查看对象内的所有属性及方法

提示__方法名__格式的方法是 Python提供的内置方法/属性,稍后会给大家介绍一些常用的内置方法/
属性
序号          方法名              类型                    作用
01             __new__             方法                  创建对象时,会被自动调用
02             __init__              方法                   对象被初始化时,会被自动调用
03             __del__              方法                   对象被从内存中销毁前,会被自动调用
04             __str__               方法                   返回对象的描述信息, print函数输出使用

提示 利用好dir() 函数，在学习时很多内容就不需要死记硬背了

02.定义简单的类(只包含方法)
面向对象是更大的封装,在一个类中封装多个方法,这样通过这个类创建出来的对
象,就可以直接调用这些方法了!

2.1定义只包含方法的类
·在 Python中要定义一个只包含方法的类,语法格式如下
class类名:
    def  方法1(self,参数列表):
           pass
    def  方法2(self,参数列表):
           pass

·方法的定义格式和之前学习过的函数几乎一样
·区别在于第一个参数必须是self,大家暂时先记住,稍后介绍self

注意:类名的命名规则要符合大驼峰命名法

2.2创建对象
·当一个类定义完成之后,要使用这个类来创建对象,语法格式如下:
对象变量 = 类名()


eg:
class Cat:
    '''这是一个猫类'''
     def eat(self):
         print("小猫爱吃鱼)
     def drink(self):
         print("小猫在喝水)

#创建猫对象
tom = CatI()
#调用动作，调用方法
tom.drink()
tom.eat()

引用概念的强调
在面向对象开发中,引用的概念是同样适用的!
·在 Python中使用类创建对象之后,tom变量中仍然记录的是对象在内存中的地址
·也就是tom变量引用了新建的猫对象
使用print输出对象变量,默认情况下是能够输出这个变量引用的对象是由哪一个类创建的对
象,以及在内存中的地址(十六进制表示)

提示:在计算机中,通常使用十六进制表示内存地址
十进制和十六进制都是用来表达数字的,只是表示的方式不一样
十进制和十六进制的数字之间可以来回转换

%d可以以10进制输出数字
%x可以以16进制输出数字

检验Tom变量的位置:
addr = id(tom)
print("%d" % addr)

03.方法中的self参数
3.1案例改造给对象增加属性
·在Python中,要给对象设置属性非常的容易,但是不推荐使用
因为:对象属性的封装应该封装在类的内部
只需要在类的外部的代码中直接通过设置一个属性即可
注意:这种方式虽然简单,但是不推荐使用!
 tom. name ="Tom"
 lazycat.name="大懒猫

(#临时增加属性，可以使用.属性名 利用赋值语句就可以了)


3.2使用self 在方法内部输出每一只猫的名字
由哪一个对象调用的方法,方法内的self 就是哪一个对象的引用

·在类封装的方法内部,self就表示当前调用方法的对象自己
·调用方法时,程序员不需要传递self参数

在方法内部
    可以通过self.访问对象的属性
    也可以通过self.调用其他的对象方法

改造代码如下:
class Cat:
    '''这是一个猫类'''
     def eat(self):
         #哪一个对象调用的方法，self就是哪一个对象的引用
         print("%s 爱吃鱼" % self.name)
     def drink(self):
         print("%s 在喝水" % self.name)

#创建猫对象
tom = CatI()
#调用动作，调用方法
tom.drink()
tom.eat()

提示
在日常开发中,不推荐在类的外部给对象增加属性
。如果在运行时,没有找到属性,程序会报错
对象应该包含有哪些属性,应该封装在类的内部

4.2初始化方法
当使用类名()创建对象时,会自动执行以下操作:
1.为对象在内存中分配空间--创建对象
2.为对象的 属性 设置初始值--初始化方法(init)【对应的是属性】

·这个初始化方法就是__init__方法,__init__是对象的内置方法

__init__方法是专门用来定义一个类具有哪些属性的方法!

在Cat中增加__init__方法,验证该方法在创建对象时会被自动调用
class Cat:
    '''这是一个猫类'''
    def __init__(self):
         print("初始化方法)

#使用类名()创建对象的时候，会自动调用初始化方法 __init__
tom = Cat()


4.3在初始化方法内部定义属性
·在__init__方法内部使用 self.属性名=属性的初始值 就可以定义属性
·定义属性之后,再使用 Cat类创建的对象,都会拥有该属性
 
class Cat:
     def_init_(self):
         print(这是一个初始化方法)
         #定义用Cat类创建的猫对象都有一个name的属性
          self. name  = "Tom"
     
      def eat(self):
           print("%s 爱吃鱼" %  self.name)
 
#使用类名()创建对象的时候,会自动调用初始化方法__init__
tom = Cat()
 
tom.eat()

4.4改造初始化方法--初始化的同时设置初始值
·在开发中,如果希望在创建对象的同时,就设置对象的属性,可以对__init__方法进行改造

1.把希望设置的属性值,定义成__init__方法的参数
2.在方法内部使用 self.属性=形参 接收外部传递的参数
3.在创建对象时,使用类名(属性1,属性2)调用

class Cat:
     def  __init__(self, name):
         print("初始化方法 %s" %  name)
         self. name =name

tom = Cat("Tom")

lazycat = Cat("大懒猫")


5.1 del_方法(知道)
在 Python中
。当使用类名()创建对象时,为对象分配完空间后,自动调用__init__方法 (一个来)
。当一个对象被从内存中销毁前,会自动调用__del__方法  (一个走)

·应用场景
init改造初始化方法,可以让创建对象更加灵活
de如果希望在对象被销毁前,再做一些事情,可以考虑一下d方法

生命周期
。一个对象从调用类名()创建,生命周期开始
。一个对象的__del__方法一旦被调用,生命周期结束
。在对象的生命周期内,可以访问对象属性,或者让对象调用方法



5.2   __str__方法
·在 Python中,使用 print输出对象变量, 默认情况下,会输出这个变量引用的对象是由哪一个类
创建的对象,以及在内存中的地址(十六进制表示)

·如果在开发中,希望使用print输出对象变量时,能够打印自定义的内容,就可以利用__str__这
个内置方法了
注意:str方法必须返回一个字符串
 
class Cat:
      def  __init__(self, new_name):
           self. name  = new_name
           print("%s 来了 "  %   self.name)
 
      def __del__(self):
           print("%s  去了" self. name)
 
      def  __str__(self):
          #必须返回一个字符串
          return   "我是小猫:  %s "  %    self.name

#Tom是一个全局变量 
tom = Cat("Tom")
print(tom)








