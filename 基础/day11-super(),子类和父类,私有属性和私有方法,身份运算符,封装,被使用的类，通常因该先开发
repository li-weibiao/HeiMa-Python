1.封装
封装是面向对象编程的一大特点
面向对象编程的第一步--将属性和方法封装到一个抽象的类中
外界使用类创建对象，然后让对象调用方法
对象方法的细节都被封装在类的内部

提示：在对象的方法内部，是可以直接访问对象的属性的！
           同一个类创建的多个对象之间，属性互不干扰

eg:小明爱跑步
class Person:

    def __init__(self,name,weight):

        #self.属性 = 形参
        self.name = name
        self.weight =weight

    def __str__(self):

        return "我的名字叫 %s 体重是 %.2f 公斤" % (self.name,self.weight)

    def run(self):

        print("%s 爱跑步，跑步锻炼身体" % self.name)

        self.weight -= 0.5           #直接在方法里修改了属性

        
    def eat(self):

        print("%s 是吃货，吃完这顿再减肥" % self.name)

        self.weight += 1


xiaoming = Person("小明",75.0)

xiaoming.run()
xiaoming.eat()

print(xiaoming)
        

2.被使用的类，通常因该先开发


小结
1.创建了一个房子类,使用到__init__和__str__两个内置方法
2.准备了一个add_item方法准备添加家具
3.使用房子类创建了一个房子对象
4.让房子对象调用了三次add_item方法,将三件家具以实参传递到add_item内部

eg:摆放家具
class HouseItem:

    def __init__(self,name,area):

        self.name = name
        self.area = area

    def __str__(self):

        return "[%s] 占地 %.2f" % (self.name,self.area)


class House:                       #类与类之间有两个空行

    def __init__(self,house_type,area):

        self.house_type = house_type
        self.area = area

        #剩余面积
        self.free_area = area

        #家具名称列表
        self.item_list = []
    

    def __str__(self):

        # python 能够自动的将一对括号内部的代码连接在一起
        return ("户型：%s\n总面积: %.2f[剩余: %.2f]\n家具: %s"
                % (self.house_type,self.area,
                   self.free_area,self.item_list))


    def add_item(self,item):

        print("要添加 %s" % item)
        #1.判断家具的面积
        if item.area > self.free_area:
            print("%s 的面积太大了，无法添加" % item.name)

            return

        #2.将家具的名称添加到列表中
        self.item_list.append(item.name)

        #3.计算剩余面积
        self.free_area -= item.area
        
    

#1.创建家具
bed = HouseItem("席梦思",4)
chest = HouseItem("衣柜",2)
table = HouseItem("餐桌",1.5)

print(bed)
print(chest)
print(table)


#2.创建房子对象
my_home = House("两室一厅",60)

my_home.add_item(bed)
my_home.add_item(chest)
my_home.add_item(table)

print(my_home)


3.4小结
主程序只负责创建房子对象和家具对象
让房子对象调用add_item方法将家具添加到房子中
·面积计算、剩余面积、家具列表等处理都被封装到房子类的内部

封装
1.封装是面向对象编程的一大特点
2.面向对象编程的第一步-将属性和方法封装到一个抽象的类中
3.外界使用类创建对象,然后让对象调用方法
4.对象方法的细节都被封装在类的内部
一个对象的属性可以是另外一个类创建的对象

定义没有初始值的属性
在定义属性时,如果不知道设置什么初始值,可以设置为None
None关键字表示什么都没有
·表示一个空对象,没有方法和属性,是一个特殊的常量
·可以将None赋值给任何一个变量


eg:士兵突击
class Gun:

    def __init__(self,model):               #初始化方法可以简化对象的创建

        #1.枪的型号
        self.model = model

        #2.子弹的数量
        self.bullet_count = 0


    def add_bullet(self,count):         #添加弹夹,没有把弹夹放在__init__方法里面，说明弹夹不用作为全局的属性

        self.bullet_count += count


    def shoot(self):                   #发射子弹

        #1.判断子弹数量
        if self.bullet_count <= 0:
            print("[%s] 没有子弹了..." % self.model)

            return

        #2.发射子弹，-1
        self.bullet_count -= 1

        #3.提示发射信息
        print("[%s] 突突突...[%d]" % (self.model,self.bullet_count))


class Soldier:

    def __init__(self,name):

        #1.姓名
        self.name = name

        #2.枪 - 新兵没有枪
        self.gun = None

    def fire(self):

        #1.判断士兵是否有枪
        if self.gun == None:
            print("[%S 还没有枪...]" % self.name)

            return

        #2.高喊口号
        print("冲啊...[%s]" % self.name)

        #3.让枪装填子弹
        self.gun.add_bullet(50)       #一个对象的属性可以是另外一个类创建的对象，对象能调用方法

        #4.让枪发射子弹
        self.gun.shoot()

        



#1.创建枪对象
ak47 = Gun("AK47")
#ak47.add_bullet(50) 
#ak47.shoot()

#2.创建许三多
xusanduo = Soldier("许三多")

xusanduo.gun = ak47
xusanduo.fire()

print(xusanduo.gun) 




小结
1.创建了一个士兵类,使用到init内置方法
2.在定义属性时,如果不知道设置什么初始值,可以设置为None
3.在封装的方法内部,还可以让自己的使用其他类创建的对象属性调用已经封装好的方法


02.身份运算符
身份运算符用于比较两个对象的内存地址是否一致一是否是对同一个对象的引用
·在 Python中针对None比较时,建议使用is判断
如： if self.gun is None:

运算符              描述                                                              实例
is             is是判断两个标识符是不是引用同一个对象            x is y,类似id(x) == id(y)
is not      is not是判断两个标识符是不是引用不同对象      x is not y,类似 id(a) != id(b)

is与==区别: 
is 用于判断两个变量引用对象是否为同一个
== 用于判断引用变量的值是否相等
>>a = [1,2,3]
>b = [1,2,3]
 >> b is a
 False
 >> b == a
 True


3.私有属性和私有方法：
01.应用场景及定义方式
应用场景
在实际开发中,对象的某些属性或方法可能只希望在 对象的内部被使用, 而不希望在外部被访问到
·私有属性就是对象不希望公开的属性
·私有方法就是对象不希望公开的方法

定义方式
在定义属性或方法时,在属性名或者方法名前增加两个下划线,定义的就是私有属性或方法
如：__age

#私有属性在外界不能够被直接访问

#在对象的方法内部，是可以访问对象的私有属性的
如：
def secret(self):
    print("%s 的年龄是 %d " % (self.name,self.__age)) #在外部调用方法，就能看到

#私有方法，同样不允许在外界直接访问
def __secret(self):
    print("%s 的年龄是 %d " % (self.name,self.__age)) #在外部调用私有方法，是访问不了的


02.伪私有属性和私有方法(科普)
提示:在日常开发中,不要使用这种方式,访问对象的私有属性或私有方法
 
Python中,并没有真正意义的私有

·在给属性、方法命名时,实际是对名称做了一些特殊处理,使得外界无法访问到
处理方式:在名称前面加上 _类名 => __类名__名称

#私有属性,外部不能直接访问到
 print(xiaofang. _Women__age)
#私有方法,外部不能直接调用
 xiaofang. _Women__secret()


3.继承
面向对象三大特性
1.封装根据职责将属性和方法封装到一个抽象的类中
2.继承实现代码的重用,相同的代码不需要重复的编写
3.多态不同的对象调用相同的方法,产生不同的执行结果,增加代码的灵活度

3.1 单继承

1.1 继承的概念，语法和特点
继承的概念：子类拥有和父类的所有方法和属性

1)继承的语法
class  类名(父类名):
         pass

·子类继承自父类,可以直接享受父类中已经封装好的方法,不需要再次开发
子类中应该根据职责,封装子类特有的属性和方法

2)专业术语
Dog类是 Animal类的子类, Animal类是Dog类的父类,Dog类从 Animal类继承
Dog类是 Animal类的派生类, Animal类是Dog类的基类,Dog类从 Animal类派生

3)继承的传递性
C类从B类继承,B类又从A类继承
那么C类就具有B类 和A类的所有属性和方法
子类拥有 父类以及 父类的父类中封装的所有属性和方法


1.2方法的重写
子类拥有父类的所有方法和属性
·子类继承自父类,可以直接享受父类中已经封装好的方法,不需要再次开发
应用场景
·当父类的方法实现不能满足子类需求时,可以对方法进行重写(override

重写父类方法有两种情况
1.覆盖父类的方法
2.对父类方法进行扩展

#如果子类中，重写了父类的方法，在使用子类对象调用方法时，会调用子类中重写的方法

1)覆盖父类的方法
·如果在开发中,父类的方法实现和子类的方法实现,完全不同
·就可以使用覆盖的方式,在子类中重新编写父类的方法实现
具体的实现方式,就相当于在子类中定义了一个和父类同名的方法并且实现
重写之后,在运行时,只会调用子类中重写的方法,而不再会调用父类封装的方法


2)对父类方法进行扩展
·如果在开发中,子类的方法实现 中 包含父类的方法实现
 。父类原本封装的方法实现 是 子类方法的一部分
就可以使用扩展的方式
1.在子类中重写父类的方法
2.在需要的位置使用 super().父类方法来调用父类方法的执行
3.代码其他的位置针对子类的需求,编写 子类特有的代码实现

关于 super
·在 Python中 super是一个特殊的类
super()就是使用 super 类创建出来的对象
·最常使用的场景就是在重写父类方法时,调用在父类中封装的方法实现
如：super().bark()          #.bark()是父类的方法

调用父类方法的另外一种方式(知道)
在 Python2.x时,如果需要调用父类的方法,还可以使用以下方式:

父类名.方法(self)

·这种方式,目前在 Python3.×还支持这种方式
·这种方法不推荐使用,因为一旦父类发生变化,方法调用位置的类名同样需要修改
提示
·在开发时,父类名和 super()两种方式不要混用
·如果使用当前子类名调用方法,会形成递归调用,出现死循环

#注意：如果使用子类调用方法，会出现递归调用 - 死循环！！！、








