1.函数的嵌套调用
增加灵活度，最主要的便是增加函数的参数

工作中针对需求的变化，因该冷静思考，不要轻易修改之前已经完成的，能够正常执行的函数。

eg:
def print_line(char,times):
    print(char * times)


def print_lines(char,times):
    row = 0
    while row < 5:
        print_line(char,times)
        row += 1


print_lines("-",20)


2.使用模块中的函数
模块是 Python程序架构的一个核心概念
·模块就好比是工具包,要想使用这个工具包中的工具,就需要导入 import这个模块
·每一个以扩展名py结尾的 Python源代码文件都是一个模块
·在模块中定义的全局变量、函数都是模块能够提供给外界直接使用的工具

eg:
import hm_10_分割线模块      #(hm_10_分割线模块是同一个目录下的，以.py结尾的文件)

hm_10_分隔线模块.print_line('-' , 50)
print(hm_10_分割线模块.name)

体验小结
·可以在一个Python文件中定义变量或者函数
然后在另外一个文件中使用import导入这个模块
导入之后,就可以使用模块名.变量/模块名.函数的方式,使用这个模块中定义的变量或者函数
模块可以让曾经编写过的代码方便的被复用!


3.模块名也是一个标识符
标识符可以由字母，下划线，数字组成
不能以数字开头
不能与关键字重名

注意：如果在给python文件起名时，以数字开头是无法在pycharm中通过导入这个模块的


4.高级变量类型

4.1.列表(一个变量，存储多个数据)
List(列表)是 Python中使用最频繁的数据类型,在其他语言中通常叫做数组
·专门用于存储一串信息
列表用[]定义,数据之间使用,分隔
·列表的索引从0开始
索引就是数据在列表中的位置编号,索引又可以被称为下标

注意:从列表中取值时,如果超出索引范围,程序会报错
name_list = ["zhangsan", "lisi", "wangwu"]

4.2 列表常用操作
·在ipython3 中定义一个列表,例如:name_list = []
·输入name_list.按下TAB键, ipython会提示列表能够使用的方法如下
 In [1]: name_list.
name_list. append name_lis. count name list. insert name list. reverse
 name_list. clear name_list. extend name_list. pop
 name_list. sort
 name_list. copy name_list.index name_list.remove


使用.index()方法需要注意，如果传递的数据不在列表中，程序会报错。

4.3 列表的增加
.append() , .extend() , .insert()

4.4 列表的删除
.clear() , .remove()（会删除列表中第一次出现的数据）, .pop() , 补充：del (将变量从内存中删除)（日常情况下，不建议使用del）

4.5 len()函数可以统计列表中元素的总数       count()函数可以统计列表中某一个数据出现的次数

.sort()升序排序
.sort(reverse=True)
.reverse()逆序，反转

关键字不需要使用括号，关键字是python内置的，具有特殊意义的标识符

方法和函数类似，同样是封装了独立的功能
方法需要通过对象来调用，表示针对这个对象要做的操作

在变量后面输入 . ，然后选择针对这个变量要执行的操作，记忆起来比函数要简单很多

5.循环遍历
·遍历就是从头到尾依次从列表中获取数据
。在循环体内部 针对每一个元素,执行相同的操作
·在 Python中为了提高列表的遍历效率专门提供的迭代 iteration遍历
·使用for就能够实现迭代遍历
#for循环内部使用的变量in列表
 for name in name list:
循环内部针对列表元素进行操作
 print(name)


6.列表的应用场景
·尽管Python的列表中可以存储不同类型的数据
但是在开发中,更多的应用场景是
1.列表存储相同类型的数据
2.通过代遍历,在循环体内部,针对列表中的每一项元素,执行相同的操作


7.元祖
元祖的定义：
Tuple(元组)与列表类似,不同之处在于元组的元素不能修改
。元组表示多个元素组成的序列
。元组在 Python开发中,有特定的应用场景
·用于存储一串信息,数据之间使用,分隔
·元组用()定义
·元组的索引从0开始
。索引就是数据在元组中的位置编号
 info_tuple =("zhangsan", 18, 1.75)
创建空元组
 tuple=()
元组中只包含一个元素时,需要在元素后面添加逗号

要通过索引来获得值，不管是在元祖中，还是在列表中，统一都用[]

8.已经知道数据的内容，希望知道该数据在元祖中的索引可以用.index()
info_tuple = ("zhangsan",18,1.75)
print(info_tuple.index("zhangsan"))
>>> 0

9.在实际开发中，除非能够确认元祖中的数据类型，否则针对元祖的循环遍历需求并不是很多
（因为元祖中通常保存的数据类型是不同的）


10.元祖的应用场景
尽管可以使用for in遍历元组
·但是在开发中,更多的应用场景是:
。函数的参数和返回值,一个函数可以接收任意多个参数,或者一次返回多个数据
有关函数的参数和返回值,在后续函数高级给大家介绍
。格式字符串,格式化字符串后面的()本质上就是一个元组
。让列表不可以被修改,以保护数据安全
 info =("zhangsan",18)
 print("%s 的年龄是 %d"  % info)

eg:
info_tuple = ("小明",21,1.85)
info_str = "%s 年龄是 %d 身高是 %.2f"  % info_tuple
print(info_str)
>>>　小明　年龄是２１　身高是１．８５　　　＃使用元祖，可以将格式化字符串拼接成新的字符串

　
11.元祖和列表之间的转换
使用 list函数可以把元祖转换成列表
使用 tuple函数可以把列表转换成元祖




