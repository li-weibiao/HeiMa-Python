1.循环
while ,   break , continue

程序开发中有三种流程方式：
顺序：从上向下，顺序执行代码
分支：根据条件判断，决定执行代码的分支
循环：让特定代码重复执行

注意不要死循环

注意语法条件有冒号：

2.赋值运算符
·在Python中,使用=可以给变量赋值
·在算术运算时,为了简化代码的编写, Python还提供了一系列的与算术运算符对应的赋值运算符
·注意:赋值运算符中间不能使用空格
运算符                   描述                     实例
=             简单的赋值运算符         c=a+b 将a+b的运算结果赋值为c
+=          加法赋值运算符             c+=a等效于c=c+a
-=           减法赋值运算符             c-=a等效于c=c-a
*=           乘法赋值运算符             c=a等效于c=ca
/=           除法赋值运算符             c/=a等效于c=c/a
∥=          取整除赋值运算符          c//a等效于c=c∥a
%=         取模(余数)赋值运算符     c%=a等效于c=c%a
**=         幂赋值运算符                  c=a等效于c=ca

3.Python中的计数方法
自然计数法（从1开始）——符合人类的习惯
程序计数法（从0开始）——几乎所有的程序语言都选择从0开始计数

因此，大家在编写程序时，因该尽量养成习惯：除非需求的特殊要求，否则循环的计数都从0开始

4.循环计算(0-100求和)
result = 0
i = 0
while i <= 100:
   print(i)
   result += i
   i += 1 
print('0-100之间的数字求和结果：%d'  %  result )

5.break 和 continue
break 某一条件满足时，退出循环，不再执行后续重复的代码
continue 某一条件满足时，不执行后续重复的代码（满足条件时，不执行此次while语句块里的内容，但后续会根据while的条件继续执行，就单单来说，就是跳过此次语句块）
（注意：在使用continue的时候，需要确认循环的条件是否修改，否则很有可能造成死循环）

6.循环嵌套
知识点对 print函数的使用做一个增强
·在默认情况下, print函数输出内容之后,会自动在内容末尾增加换行
·如果不希望末尾增加换行,可以在 print函数输出内容的后面增加,end=""
其中""中间可以指定 print函数输出内容之后,继续希望显示的内容
语法格式如下:
#向控制台输出内容结束之后,不会换行
 print("*", end="")
#单纯的换行
 print("")

end=""表示向控制台输出内容结束之后,不会换行

(eg:打印五行星星:
row = 1
while row <= 5:
    #每一行要打印的星星就是和当前的行数是一致的
    #增加一个小的循环，专门负责当前行中，每一列的星星显示
    #定义一个烈计数器变量
    col = 1
   #开始循环
    while col  <= row:
             #print("第 %d 列"  %  col )
               print("*", end="")
               col += 1
    #print("第 %d 行" % row)
    #这行代码的目的，就是在一行星星输出完成之后，添加换行！
    print()
    row += 1
）

7.转义字符
\t在控制台输出一个制表符,协助在输出文本时垂直方向保持对齐
\n在控制台输出一个换行符
制表符的功能是在不使用表格的情况下,在垂直方向按列对齐文本

转义字符         描述
\\                    反斜杠符号
 \'                       单引号
\"                      双引号
\n                        换行
\t                      横向制表符
\r                       回车

（eg:打印九九乘法表：
row = 1
while row <= 9:
    col = 1
    while col <= row:
        #print("*",end="")
        print("%d * %d = %d" % (col,row,col * row), end="\t")    #注意，格式化输出，%前后没有逗号相连,加了\t可以垂直方向对齐
        col += 1

    print("")

    row += 1
)




