2)from..import导入
·如果希望从某一个模块中,导入部分工具,就可以使用 from .. import的方式
 import模块名是一次性把模块中所有工具全部导入,并且通过模块名别名访问

#从模块导入某一个工具
from   模块名1    import   工具名

导入之后
。不需要通过模块名
。可以直接使用模块提供的工具-全局变量、函数、类

注意
如果两个模块,存在同名的函数,那么后导入模块的函数,会覆盖掉先导入的函数
。开发时 import 代码应该统一写在代码的顶部，更容易及时发现冲突
。一旦发现冲突，可以使用 as 关键字 给其中一个工具起一个别名

from..import'(知道)
#从模块导入所有工具
from  模块名1   import   *
注意
这种方式不推荐使用,因为函数重名并没有任何的提示,出现问题不好排查


1.3模块的搜索顺序[扩展]
 Python的解释器在导入模块时,会:
1.搜索当前目录 指定模块名的文件,如果有就直接导入
2.如果没有,再搜索系统目录

在开发时,给文件起名,不要和系统的模块文件重名
 
Python中每一个模块都有一个内置属性__file__可以查看模块的完整路径

示例
import random
#生成一个0~10的数字
rand= random. randint(0,10)
print(rand)

注意:如果当前目录下,存在一个 random.py的文件,程序就无法正常执行了!
·这个时候, Python的解释器会加载当前目录下的 random.py而不会加载系统的 random模块


1.4原则每一个文件都应该是可以被导入的
·一个独立的 Python文件就是一个模块
·在导入文件时,文件中所有没有任何缩进的代码都会被执行一遍!

实际开发场景
·在实际开发中,每一个模块都是独立开发的,大多都有专人负责
·开发人员通常会在模块下方增加一些测试代码
。仅在模块内使用,而被导入到其他文件中不需要执行

__name__属性
·__name__属性可以做到,测试模块的代码只在测试情况下被运行,而在被导入时
不会被执行!
·__name__是Python的一个内置属性,记录着一个字符串
·如果是被其他文件导入的,__name__就是模块名
如果是当前执行的程序__name__是__main__

#向外界提供的工具有全局变量,函数和类,注意:直接执行的代码不是向外界提供的工具！

#文件被导入时，能够直接执行的代码不需要被执行!

#如果直接执行__name__，得到的永远都是__main__。

在很多 Python文件中都会看到以下格式的代码:
#导入模块
#定义全局变量
#定义类
#定义函数

#在代码的最下方
def main():
    #
    pass
#根据__name__判断是否执行下方代码
if __name__ == "__main__":
    main()


eg: __name__模块进行测试，不会在其他文件里被使用

def say_hello():
    print("你好你好，我是 say hello")


#如果直接执行模块，__name__永远都是__main__
if __name__ == "__main__":              #__name__模块进行测试，不会在其他文件里被使用
    print(__name__)

    #文件被导入时，能够直接执行的代码不需要被执行！
    print("小明开发的模块")
    say_hello()



02.包(Package)
概念
·包是一个包含多个模块的特殊目录           #一个独立的python文件就是一个模块
·目录下有一个特殊的文件__init__.py
·包名的命名方式和变量名一致,小写字母 + _

好处
·使用 import 包名 可以一次性导入包中所有的模块

案例演练
1.新建一个 hm_message 的包
2.在目录下,新建两个文件 send_message和 receive_message
3.在send_ message文件中定义一个send函数
4.在 receive_ message文件中定义一个 receive函数
5.在外部直接导入 hm_message的包
 
__init__.py
·要在外界使用包中的模块,需要在__init__.py中指定 对外界提供的模块列表
#从当前目录导入模块列表
from . import send_message
from . import receive_message


03.发布模块(知道)
·如果希望自己开发的模块,分享给其他人,可以按照以下步骤操作
3.1制作发布压缩包步骤
1)创建setup.py
 setup.py的文件:

from distutils. core import setup
setup(name="hm_message",#包名
   version="1.0",#版本
   description="itheima's发送和接收消息模块",#描述信息
   long_description="完整的发送和接收消息模块",#完整描述信息
   author="itheima",#作者
   author_email="itheimaitheima.com",#作者邮箱
   url="www. itheima. com",#主页
   py_modules=["hm_message. send_message",
                          "hm_message. receive_message"])

有关字典参数的详细信息,可以参阅官方网站:
 https://docs. python.org/2/distutils/apiref.htmL

2)构建模块
python3  setup.py build
3)生成发布压缩包
python3  setup. py sdist


3.2安装模块(其他人拿到安装包后)
tar -zxvf hm_message-1.0.tar.gz
sudo python3 setup. py install


卸载模块
直接从安装目录下,把安装模块的目录删除就可以
cd  /usr/local/lib/python33.5/dist-packages-/
sudo  rm -r  hm_message*

#__file__ 可以查看模块和包的完整路径
如：hm_message.__file__



33 pip安装第三方模块
第三方模块通常是 指由知名的第三方团队开发的并且被程序员广泛使用的 Python包/模块
例如 pygame就是一套非常成熟的游戏开发模块
pip 是一个现代的,通用的包管理工具
·提供了对Python包的查找、下载、安装、卸载等功能

安装和卸载命令如下:
#将模块安装到 Python2×环境
 sudo pip install pygame
 sudo pip uninstall pygame
#将模块安装到 Python3.×环境
 sudo pip3 install pygame
 sudo pip3 uninstall pygame

在Mac下安装 iPython
 sudo pip install ipython

在 Linux下安装 iPython
 sudo apt install ipython
 sudo apt install ipython3


2. 文件的概念和作用
计算机的文件，就是长期储存设备上的一段数据

在计算机中，文件是以二进制的方式保存在磁盘上的

文本文件和进制文件
·文本文件
。可以使用文本编辑软件查看
。本质上还是二进制文件
例如: python的源程序

二进制文件
。保存的内容不是给人直接阅读的,而是提供给其他软件使用的
。例如:图片文件、音频文件、视频文件等等
。二进制文件不能使用文本编辑软件查看


2.2  python中操作文件的函数/方法
·在 Python中要操作文件需要记住1个函数和3个方法
序号                  函数                      方法说明
01                    open                    打开文件,并且返回文件操作对象
02                    read                     将文件内容读取到内存
03                    write                     将指定内容写入文件
04                    close                     关闭文件

open函数负责打开文件,并且返回文件对象
read/write/ close三个方法都需要通过文件对象来调用



2.3 read方法读取文件
open函数的第一个参数是要打开的文件名(文件名区分大小写)
。如果文件存在,返回文件操作对象
。如果文件不存在,会抛出异常
read方法 可以一次性读入并返回文件的所有内容
close方法负责关闭文件
。如果忘记关闭文件,会造成系统资源消耗,而且会影响到后续对文件的访问

注意:方法执行后,会把文件指针移动到文件的末尾
#1.打开文件名需要注意大小写
file = open("README)          #因为会返回一个结果，所以赋值给file
#2.读取
text = file.read()
print(text)
#3.关闭
file. close()

提示
·在开发中,通常会先编写打开和关闭的代码,再编写中间针对文件的读写操作!


文件指针(知道)
文件指针标记从哪个位置开始读取数据
·第一次打开文件时,通常文件指针会指向文件的开始位置
·当执行了read方法后,文件指针会移动到读取内容的末尾
默认情况下会移动到文件末尾
思考
·如果执行了一次read方法,读取了所有内容,那么再次调用read方法,还能够获得到内容吗?
答：
不能。
第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容


2.4   打开文件的方式
open函数默认以只读方式打开文件,并且返回文件对象

语法如下:
f=open("文件名,访问方式")

访问方式                   说明
r                               以只读方式打开文件。文件的指针将会放在文件的开头,这是默认模式。如果文件不存在抛出异常
w                             以只写方式打开文件。如果文件存在会被覆盖。如果文件不存在,创建新文件
a                              以追加方式打开文件。如果该文件已存在,文件指针将会放在文件的结尾。如果文件不存在,创建新文件进行写入
r+                            以读写方式打开文件。文件的指针将会放在文件的开头。如果文件不存在,抛出异常
w+                          以读写方式打开文件。如果文件存在会被覆盖。如果文件不存在,创建新文件
a+                           以读写方式打开文件。如果该文件已存在,文件指针将会放在文件的结尾。如果文件不存在,创建新文件进行写入

提示
·频繁的移动文件指针,会影响文件的读写效率,开发中更多的时候会以只读、只写的方式来操作文件


eg:
#1.打开                                       #第一步
file=open("README","w")
#2.写入文件                                #第三步
file. write("hello") I
#3.关闭                                       #第二步，为了不忘记关闭文件，所以作为第二步
file. close()


2.5按行读取文件内容
read方法默认会把文件的所有内容一次性读取到内存
·如果文件太大,对内存的占用会非常严重
 
readline方法
。readline方法可以一次读取一行内容
。方法执行后,会把文件指针移动到下一行,准备再次读取

读取大文件的正确姿势
#打开文件
file = open("README")
while True:
    #读取一行内容
    text = file. readline()
    #判断是否读到内容
    if not text:
        break
    #每读取一行的末尾已经有了一个`\n`
    print(text, end=")
#关闭文件
 file. close()


3.文件复制

eg: 小文件
#1.打开
file_read=open("README")                       #原文件
file_write=open("REAMDE[复件]","w")      #目标文件
#2.读、写
text = file_read.read()
file_write. write(text)
#3.关闭
file_read. close()
file_write. close()


大文件复制
。打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件

#1.打开
file_read=open("README")
file_write=open("REAMDE[复件]","w")
#2.读、写
while True:
    #读取一行内容
    text= file read. readline()
    #判断是否读取到内容
    if not text:
         break
    file_write. write(text)
#3.关闭
file_read. close()
file_write. close()



03.文件/目录的常用管理操作
·在终端/文件浏览器、中可以执行常规的文件/目录管理操作,例如:
。创建、重命名、删除、改变路径、查看目录内容
·在 Python中,如果希望通过程序实现上述功能,需要导入os模块

文件操作   
序号           方法名       说明                         示例
01             rename     重命名文件       os. rename(源文件名,目标文件名)
02             remove      删除文件          os remove(文件名)

目录操作
序号             方法名             说明                     示例
01                 listdir           目录列表                os.listdir(目录名)
02                mkdir           创建目录                os.mkdir(目录名)
03                 rmdir           删除目录                os. rmdir(目录名)
04                getcwd         获取当前目录         os.getcwd(
05                chdir             修改工作目录         os.chdir目标目录)
06                path.isdir     判断是否是文件       os.path. isdir文件路径

提示:文件或者目录操作都支持相对路径和绝对路径



04.文本文件的编码格式(科普)
·文本文件存储的内容是基于字符编码的文件,常见的编码有 ASCII编码, UNICODE编码等
 Python2x默认使用 ASCII编码
 Python3x默认使用UTF-8编码
4.1Ascll 编码和 UNICODE编码
 ASCII编码
计算机中只有256个ACI字符
·一个ASCII在内存中占用1个字节的空间
。8个0/1的排列组合方式一共有256种,也就是2**8

UTF-8编码格式
计算机中使用1~6个字节来表示一个UTF-8字符,涵盖了地球上几乎所有地区的文字
·大多数汉字会使用3个字节表示
UTf-8是 UNICOPE编码的一种编码格式


4.2 Ptyhon中如何使用中文
 Python2默认使用 ASCII编码格式
 Python3默认使用UTF-8编码格式
·在 Python2x文件的第一行增加以下代码,解释器会以utf-8编码来处理 python文件
# *-* coding:utf8 *-*
这方式是官方推荐使用的!
也可以使用
 coding=utf8
 unicode字符串
·在 Python2.x中,即使指定了文件使用UTF-8的编码格式,但是在遍历字符串时,仍然会以字节为
单位遍历字符串
要能够正确的遍历字符串,在定义字符串时,需要在字符串的引号前,增加一个小写字母u,告诉解
释器这是一个 unicode字符串(使用UT-8编码格式的字符串)

eg:
#*-* coding:utf8 *-*
#引号前面的u告诉解释器这是一个utf8编码格式的字符串
 hello_str=u"helo世界"
 print(hello str)
 for c in hello str:
     print(c)


evaL函数
eval()    函数十分强大   将字符串当成有效的表达式来求值    并返回计算结果
#基本的数学计算
In [1]: eval("1+1")
Out[1]: 2
#字符串重复
In[2]:eval("'*' * 10")
out[2]: '*****'
#将字符串转换成列表
In[3]: type(eval("[1,2,3,4,5]"))
Out[3]: list
#将字符串转换成字典
 In [4]: type(eval("{'name': 'xiaoming' 'age': 18}"))
 Out[4]: dict
案例-计算器
需求
1.提示用户输入一个加减乘除混合运算
2.返回计算结果
 input_str= input(请输入一个算术题:")
 print(eval(input_str))


不要滥用eval
在开发时千万不要使用eval直接转换 input的结果
__import__('os'). system('ls')
·等价代码
import os
os. system(终端命令")

·执行成功,返回0
·执行失败,返回错误信息








