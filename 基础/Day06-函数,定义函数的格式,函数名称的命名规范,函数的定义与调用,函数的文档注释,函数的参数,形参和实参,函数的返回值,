1.函数
所谓函数，就是把具有独立功能的代码块组织为一个小模块，在需要的时候调用。

函数的使用包含两个步骤：
1.定义函数--封装独立的功能
2.调用函数--享受封装的成果

函数的作用，在开发程序时，使用函数可以提高编写的效率以及代码的重用。

（需要重复使用代码时，就可以定义函数了）

2.定义函数的格式如下：
def 函数名():
       函数封装的代码

1.def是英文 define的缩写
2.函数名称应该能够表达函数封装代码的功能,方便后续的调用
3.函数名称的命名应该符合标识符的命名规则
·可以由字母、下划线和数字组成
不能以数字开头
·不能与关键字重名

定义好函数之后，只表示这个函数封装了一段代码，如果不主动调用函数，函数是不会主动执行的

3.在使用函数名调用函数之前，必须要保证python已经知道函数的存在
（函数定义必须要在函数调用的上方）

4.函数的文档注释
在开发中,如果希望给函数添加注释,应该在定义函数的下方,使用连续的三对引号
·在连续的三对引号之间编写对函数的说明文字
·在函数调用位置,使用快捷键 CTRL + Q 可以查看函数的说明信息
注意:因为函数体相对比较独立,函数定义的上方,应该和其他代码(包括注释)保留
两个空行

5.函数的参数
在函数名的后面的小括号内部填写参数
多个参数之间使用，分隔

参数的作用：
函数,把具有独立功能的代码块组织为一个小模块,在需要的时候调用
函数的参数,增加函数的通用性,针对相同的数据处理逻辑,能够适应更多的数据
1.在函数内部,把参数当做变量使用,进行需要的数据处理
2.函数调用时,按照函数定义的参数顺序,把希望在函数内部处理的数据,通过参数传递

6.形参和实参
形参：定义函数时，小括号中的参数，是用来接收参数用的，在函数内部作为变量使用
实参：调用函数时，小括号中的参数，是用来把数据传递到函数内部用的。

7.函数的返回值
·在程序开发中,有时候,会希望一个函数执行结束后,告诉调用者一个结果,以便调用者针对具体的结
果做后续的处理
·返回值是函数完成工作后,最后给调用者的一个结果
在函数中使用 return关键字可以返回结果
·调用函数一方,可以使用变量来接收函数的返回结果
注意: return表示返回,后续的代码都不会被执行

def sum_2_ num(num1, num2):
      '''对两个数字的求和'''
      return numl + num2
 #调用函数,并使用 result变量接收计算结果
 result  =  sum_2_num(10, 20)
 print("计算结果是%d"  %   result)


def sum_2_num(num1,num2):
    result = num1 + num2
    return result
#可以使用变量，来接收函数执行的返回结果 
sum_result = sum_2_num(10,20)
print("计算结果: %d"  %   sum_result)




