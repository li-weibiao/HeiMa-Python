1.ipython：支持linux命令，并且支持自动补全

2.集成开发环境IDE--集成了开发软件需要的所有工具（图形界面，代码编辑器，编译器/解释器，调试器等）：比如pycharm

3.恢复pycharm初始设置(如果正在运行，要先关掉pycharm):
ls -la   
rm -rf  ~/.Pycharm2016.3     #这个配置文件是隐藏的,~代表你的/home/用户名目录，假设你的用户名是x，那么~/就是/home/x/

4.项目简介：开发项目就是开发一个专门解决一个复杂业务功能的软件，
通常每一个项目就具有一个独立专属的目录，用于保存所有和项目相关的文件，
一个项目通常会包含很多源文件

5.ubantu 扩大虚拟机系统磁盘空间
https://www.cnblogs.com/chenyongjun/p/4604222.html

6.命名规则：a.项目名以数字编号，随着知识点递增，编号递增
                    例如：01_Python基础、02_分支、03_循环
                     b.每个项目下的文件名都以hm_xx_知识点来命名
                      例如：hm_01_hello.py，xx是演练文件的序号
(注意：命名文件名时建议只使用小写字母，数字，下划线，文件名不能以数字开始)

7.linux是多用户，因此我们因该将额外安装的软件（解压缩后的目录）移动到/opt目录下，可以方便其他用户使用
sudo mv pycharm-2017.1.3/  /opt
cd /opt/pycharm-2017.1.3/bin
./pycharm.sh   #启动pycharm

8.设置启动图标：tools->create desktop entry->create the entry for all users->ok

9.卸载之前版本的PyCharm(就把下面的步骤依次rm删除)
1)程序安装
1.程序文件目录
将安装包解压缩,并且移动到/opt目录下
。所有的相关文件都保存在解压缩的目录中
2.配置文件目录
启动PyCharm动后,会在用户家目录下建立一个 .PyCharmxxx的隐藏目录
保存 PyCharm相关的配置信息
3.快捷方式文件
/usr/share/applications/jetbrains-pycharm. desktop
在 ubuntu中,应用程序启动的快捷方式通常都保存在/usr/ share/applications目录
下

2)程序卸载
要卸载PyCharm只需要做以下两步工作:
1.删除解压缩目录
 sudo rm-r /opt/pycharm-2016.3.1/
2.删除家目录下用于保存配置信息的隐藏目录
 rm -r ~/.PyCharm2016.3/
如果不再使用 PyCharm还需要将/usr/sare/applications/下的
 jetbrains-pycharm.desktop删掉

(自己环境下的ubantu里的pycharm缓存：
317   cd
318    ls -la
319    cd. cache/
320     1s
321      ls-la
322     cd JetBrains/
323      ls
324     cd PyCharm2020.2/
325     ls
326      history
)

10.对于商业项目而言，通常在一个项目中，只有一个可以直接执行的python源程序


11.注释：使用自己熟悉的语言，在程序中对某些代码进行标注说明，增强程序的可读性
# 号后面来个空格（注释的官方用法）（点击小灯泡，选择第一个自动排序）
如果注释内容比较多，可以在上方注释，少，则可以在代码后面注释

12.多行注释，三引号成对，注释信息很多

13.什么时候需要使用注释?
   1.注释不是越多越好,对于一目了然的代码,不需要添加注释
   2.对于复杂的操作,应该在操作开始前写上若干行注释
   3.对于不是一目了然的代码,应在其行尾添加注释(为了提高可读性,注释应该至少离开代码2个空格)
   4.绝不要描述代码,假设阅读代码的人比你更懂 Python,他只是不知道你的代码要做什么
   在一些正规的开发团队,通常会有代码审核的惯例,就是一个团队中彼此阅读对方的
    代码

关于代码规范
 Python官方提供有一系列eP(Python Enhancement Proposals)文档
·其中第8篇文档专门针对 Python的代码格式给出了建议,也就是俗称的PEP8
·文档地址 https: //www.python.org/dev/peps/pep-0008/
·谷歌有对应的中文文档 http: /zh-google-styleguide. readthedocs. io/en/latest/google-python-styleguide/
 python style rules/
任何语言的程序员,编写出符合规范的代码,是开始程序生涯的第一步


14.算数运算符（+，-，*，/，//，%，**） （可以用字符串加*号，实现多次输入，比如“对不起 ”* 100）

15.计算机中的三大件：CPU，内存，硬盘

16.python程序执行原理以及python解释器有多大：
1.操作系统会首先让CPU把 Python解释器的程序复制到内存中
2. Python解释器根据语法规则,从上向下让cpu翻译 Python程序中的代码
3.CPU负责执行翻译完成的代码
 Python的解释器有多大?
·执行以下终端命令可以查看 Python解释器的大小
#1.确认解释器所在位置
 which python
#2.查看 python文件大小(只是一个软链接)
  ls -lh /usr/bin/python
#3.查看具体文件大小
 ls -lh /usr/bin/python2. 7
提示:建立软链接的目的,是为了方便使用者不用记住使用的解释器是哪一个具体版
本

17.程序就是用来处理数据的，而变量就是用来存储数据的

18.变量定义：在python中，每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建

19.变量名只有在第一次出现才是定义变量，再次出现不是定义变量，而是直接使用之前定义过的变量

20.变量的类型（变量存储数据的类型）
str,bool,int,float

21.在python中，定义变量时是不需要指定变量的类型的，在运行的时候，python解释器会根据
赋值语句等号右侧的数据自动推导出变量保存数据的准确类型。

22.python里，布尔值，非零即真

23.数据类型可以分为数字型和非数字型
·在Python中定义变量是不需要指定类型(在其他很多高级语言中都需要)
·数据类型可以分为数字型和非数字型
数字型：
。整型(int)
。浮点型( float)
。布尔型(boot)
      真rue 非0数-非零即真
      假False  0
复数型(complex)
主要用于科学计算,例如:平面场问题、波动问题、电感电容等问题
非数字型：
。字符串
。列表
。元组
。字典

24.在ipython中可以使用type()函数来查看一个变量的类型。




