1.字典
dictionary(字典)是除列表以外 Python之中最灵活的数据类型
字典同样可以用来存储多个数据
。通常用于存储描述一个物体的相关信息
·和列表的区别
。列表是有序的对象集合
。字典是无序的对象集合
字典用{}定义
·字典使用 键值对 存储数据,键值对之间使用,分隔
。键 key是索引
。值 value是数据
。键和值之间使用:分隔
。键必须是唯一的
。值可以取任何数据类型,但键只能使用字符串、数字或元组
 xiaoming={"name":小明",
"age":18,
 "gender": True,
 "height": 1.75}

#如果key不存在，会新增键值对
xiaoming_dict['age']  = 18
#如果key存在，会修改已经存在的键值对

#删除用pop
xiaoming_dict.pop("name")

#在删除指定键值对的时候，如果指定的key不存在，程序会报错

2.字典常用操作
小技巧：输入（自己定义的）字典名.按下TAB键，ipython会提示字典能够使用的函数

#首先，定义一个字典
xiaoming_dict = {"name":"小明",
                                 "age":18}

#统计键值对的数量：
print(len(xiaoming_dict))

#合并字典:
temp_dict = {"height":1.75}

xiaoming_dict.update(temp_dict)       #用.update()方法来进行合并字典

注意：如果被合并的字典中包含已经存在的键值对，会覆盖原有的键值对

#清空字典
xiaoming_dict.clear()

3.循环遍历字典中的值
遍历就是依次从字典中获取所有键值对
#for循环内部使用的 'key 的变量' in  字典
#变量k是每一次循环中，获取到的键值对的key
 for k in xiaoming:
     print("%s: %s"  %  (k, xiaoming [k]))
提示:在实际开发中,由于字典中每一个键值对保存数据的类型是不同的,所以针对字
典的循环遍历需求并不是很多

4.字典的应用场景
.尽管可以使用for in遍历字典
·但是在开发中,更多的应用场景是:
。使用多个键值对,存储描述一个 物体 的相关信息--描述更复杂的数据信息
。将多个字典放在一个列表中,再进行遍历,在循环体内部针对每一个字典进行相同的处理
eg: card_list=[{"name":"张三",
qq":12345,
"phone":"110},
{"name":"李四",
qq":"54321,
phone":"10086"}]

5.字符串
一对双引号或者一对单引号，定义的一串字符。
大多数编程语言都是用双引号 " 来定义字符串。

6.字符串的索引
是通过每一个字母开始计算，而不是一个单词，甚至一个空格也是字符。
（索引是从0开始计算）

7.字符串的常用操作
小技巧：可以在ipython中，定义一个字符串，输入字符串名. ,按下tab键，ipython
会提示字符串能够使用的方法

len(字符串)可以获取字符串的长度
字符串.count(字符串)  小字符串在大字符串中出现的次数

字符串[索引]从字符串中取出单个字符
字符串.index(字符串)获得小字符串第一次出现的索引

#先定义一个字符串
hello_str = "hello hello"

#统计字符串长度
print(len(hello_str))

#统计某一个小字符串（子字符串）出现的次数
print(hello_str.count("llo"))
#对于没有的字符串，统计他出现的次数，不会报错

#某一个字符串出现的位置
print(hello_str.index("llo"))
#对于没有的值，这样寻找出现的位置会报错

提示：正是因为python内置提供的方法足够多，才使得在开发时，能够针对字符串进行更加灵活的操作，应对更多的开发需求！

7.1 字符串判断类型
string.isspace            如果string中只包含空格，则返回True
...

string.isdecimal()      如果string只包含数字则返回True,全角数字
string.isdigit()            如果string只包含数字则返回True,全角数字，（1），\u00b2
string.isnumeric()      如果string只包含数字则返回True,全角数字，汉字数字
#这三个判断数字的方法，都不能判断小数

7.2 字符串的查找和替换
方法                                             说明
 string.startswith(str)                检查字符串是否是以str开头,是则返回true
 string.endswith(str)                 检查字符串是否是以str结束,是则返回true
 string.find(str, star=0,
end=len(string)                         检测str是否包含在 string中,如果 start和end指定范围,则检查是否包含在指定范围内,如果是返回开始的索引值,否则返回-1
 string.rfind(str, start=0,               类似于find0函数,不过是从右边开始查找

end=lenstring))
 string. index(str                          跟 find方法类似,只不过如果str不在 string会报错   
 start=0,
                                             
 end=len(string))
 string.rindex(str,                          类似于 index00,不过是从右边开始
 start=0,
                                          
 end=len(string))
 string.replace(old_str,                  把 string中的old_str替换成 newstr,如果num指定,则替换不超过num次
 new_str,
 num=string.count(old))


#查找指定字符串
#index同样可以查找指定的字符串在大字符串中的索引
print(hello_str.find("llo"))
#index如果指定的字符串不存在，会报错
#find如果指定的字符串不存在，会返回-1

#替换字符串
#replace方法执行完成之后，会返回一个新的字符串，但不会修改原有字符串的内容
print(hello_str.replace("world","python"))

#字符串文本对齐的方法
方法                                                   说明
 string.Ljust(width)      返回一个原字符串左对齐,并使用空格填充至长度 width的新字符串
 string.rjust(width)       返回一个原字符串右对齐,并使用空格填充至长度 width的新字符串
 string.center(width)    返回一个原字符串居中,并使用空格填充至长度 width的新字符串

#顺序并且居中
for poem_str in poem:
    print("|%s|"  %  poem_str.center(10, "　"))      #10后面的空格是中文的全角空格

7.3 去除空白字符
方法                                        说明
 string.lstrip()                  截掉 string左边(开始)的空白字符
 string.rstrip()                 截掉 string右边(末尾)的空白字符
 string.strip()                  截掉 string左右两边的空白字符
       
#去除空白字符，接上面顺序并且居中的例子：
...
    print("|%s|"  %  poem_str.strip().center(10, "　"))

8.字符串的拆分和连接
#拆分字符串
poem_list = poem_str.split()
print(poem_list)

#合并字符串
result = "　".join(poem_list)            #join前的空格是作为分隔符.使用join后会生成新的字符串 
print(result)

9.字符串的切片
字符串[开始索引：结束索引：步长]

·切片方法适用于字符串、列表、元组
。切片使用索引值来限定范围,从一个大的字符串中切出小的字符串
。列表和元组都是有序的集合,都能够通过索引值获取到对应的数据
。字典是一个无序的集合,是使用键值对保存数据

注意:
1.指定的区间属于左闭右开型 (开始索引,结束索引)=>开始索引 >=范围<结束索引
·从起始位开始,到结束位的前一位结束(不包含结束位本身)
2.从头开始,开始索引数字可以省略,冒号不能省略
3.到末尾结束,结束索引数字可以省略,冒号不能省略
4.步长默认为1,如果连续切片,数字和冒号都可以省略

#隔一个取一个,步长为2
num_str[ : : 2]

#截取字符串末尾两个字符
num_str[-2:]

#截取字符串并以逆序显示
num_str[-1: : -1]


10.公共方法
max(item)      返回容器中元素最大值               如果是字典，只针对key比较
min(item)       返回容器中元素最小值               如果是字典，只针对key比较
cmp(item1,item2)    比较两个值，-1小于/0相等/1大于     python3.x取消了cmp函数

不能通过索引对字典切片

字符串类型：字典和整数两个类型不支持 * 这个符号。

列表通过 + 号相加，会生成新的列表，而通过.extend()会在原来的列表里添加

注意：
in 在对字典操作时，判断的是字典的键
in 和 not in 被称为成员运算符

11.完整的 for循环语法
·在 Python中完整的for循环的语法如下:
for变量in集合:
     循环体代码
else:
    #如果循环体内部使用break退出了循环
    #else 下方的代码就不会被执行
    没有通过 break退出循环,循环结束后,会执行的代码

完整的foe循环应用场景：
·在迭代遍历嵌套的数据类型时,例如一个列表包含了多个字典
需求:要判断某一个字典中是否存在指定的值
。如果存在,提示并且退出循环
。如果不存在,在循环整体结束后,希望得到一个统一的提示


eg:
students = [
    {"name":"阿土"},
    {"name":"小美"}
    ]

#在学员列表中搜索指定的姓名
find_name = "张三"

for stu_dict in students:
    print(stu_dict)
    if stu_dict["name"] == find_name:
        print("找到了 %s" % find_name)

        #如果已经找到，因该直接退出循环，而不再遍历后续的内容
        break
else:
    #如果希望在搜索列表时，所有的字典检查之后，都没有发现需要搜索的目标，还希望得到一个统一的提示！
    print("抱歉没有找到 %s" % find_name)

print("循环结束")


11.综合应用--名片管理系统
11.1 框架搭建
目标
·搭建名片管理系统框架结构
1.准备文件确定文件名,保证能够在需要的位置编写代码
2.编写主运行循环,实现基本的用户输入和判断
1.1文件准备
1.新建 cards_main.py保存主程序功能代码
程序的入口
每一次启动名片管理系统都通过main这个文件启动
2.新建 cards_tools.py保存所有名片功能函数
·将对名片的新增、查询、修改、删除等功能封装在不同的函数中

11.2编写主运行程序
在 cards_main 中添加一个无限循环

字符串判断

pass

无限循环

TODO注释：在#后跟上TODO，用于标记需要去做的工作

#主程序是框架，框架搭好，就可以在tools文件里详细添加细节

11.3 保存名片数据的结构
程序就是用来处理数据的，而变量就是用来存储数据的
。使用字典记录每一张名片的详细信息
。使用列表统一记录所有的名片字典

定义名片列表变量
。在cards_tools文件的顶部增加一个列表变量
# 所有名片记录的列表
card_list = []

注意：
1.所有名片相关操作，都需要使用这个列表，所以因该定义在程序的顶部
2.程序刚运行时，没有数据，所以是空列表


12.linux上的Shebang符号(#!)
#!这个符号叫做 Shebang或者sha-bang
Shebang通常在Unix系统脚本的中第一行开头使用
指明执行这个脚本文件的解释程序

使用 Shebang的步骤
1.使用 which查询 python3解释器所在路径
 which python3
·2.修改要运行的主 python文件,在第一行增加以下内容
 # ! /usr/bin/python3
·3.修改主 python文件的文件权限,增加执行权限
 chmod +x cards_main.py
4.在需要时执行程序即可
 ./cards_main.py




